var SearchFiles = ["GUID-DA26AD7F-FC85-489B-A825-B749388C1794.html",
							"GUID-B02CCF0F-B40C-487D-8D4D-570EFA78D2BF.html",
							"GUID-B02CCF0F-B40C-487D-8D4D-570EFA78D2BF.html",
							"GUID-B02CCF0F-B40C-487D-8D4D-570EFA78D2BF.html",
							"GUID-B02CCF0F-B40C-487D-8D4D-570EFA78D2BF.html",
							"GUID-45593756-3CB7-40EC-87BF-6F5D5C3A6DE5.html",
							"GUID-45593756-3CB7-40EC-87BF-6F5D5C3A6DE5.html",
							"GUID-45593756-3CB7-40EC-87BF-6F5D5C3A6DE5.html",
							"GUID-45593756-3CB7-40EC-87BF-6F5D5C3A6DE5.html",
							"GUID-45593756-3CB7-40EC-87BF-6F5D5C3A6DE5.html",
							"GUID-45593756-3CB7-40EC-87BF-6F5D5C3A6DE5.html",
							"GUID-3A04868E-EBB9-4C24-B572-455157B3ECD4.html",
							"GUID-3A04868E-EBB9-4C24-B572-455157B3ECD4.html",
							"GUID-3A04868E-EBB9-4C24-B572-455157B3ECD4.html",
							"GUID-3A04868E-EBB9-4C24-B572-455157B3ECD4.html",
							"GUID-3A04868E-EBB9-4C24-B572-455157B3ECD4.html",
							"GUID-A912FC9F-E87D-458A-940F-279BE3C56FA2.html",
							"GUID-A912FC9F-E87D-458A-940F-279BE3C56FA2.html",
							"GUID-A912FC9F-E87D-458A-940F-279BE3C56FA2.html",
							"GUID-A912FC9F-E87D-458A-940F-279BE3C56FA2.html",
							"GUID-A912FC9F-E87D-458A-940F-279BE3C56FA2.html",
							"GUID-CC5CDD03-6D8F-480E-B3AC-C1DA4A45EA7A.html",
							"GUID-CC5CDD03-6D8F-480E-B3AC-C1DA4A45EA7A.html",
							"GUID-CC5CDD03-6D8F-480E-B3AC-C1DA4A45EA7A.html",
							"GUID-CC5CDD03-6D8F-480E-B3AC-C1DA4A45EA7A.html",
							"GUID-CC5CDD03-6D8F-480E-B3AC-C1DA4A45EA7A.html",
							"GUID-213DA604-1749-4752-B6F7-73600BA8F232.html",
							"GUID-213DA604-1749-4752-B6F7-73600BA8F232.html",
							"GUID-213DA604-1749-4752-B6F7-73600BA8F232.html",
							"GUID-213DA604-1749-4752-B6F7-73600BA8F232.html",
							"GUID-213DA604-1749-4752-B6F7-73600BA8F232.html",
							"GUID-ED639BEA-5958-4DEA-BA72-C736505A37B0.html",
							"GUID-ED639BEA-5958-4DEA-BA72-C736505A37B0.html",
							"GUID-ED639BEA-5958-4DEA-BA72-C736505A37B0.html",
							"GUID-ED639BEA-5958-4DEA-BA72-C736505A37B0.html",
							"GUID-ED639BEA-5958-4DEA-BA72-C736505A37B0.html",
							"GUID-9E164756-9279-46E1-96D7-1D4F9F460F78.html",
							"GUID-9E164756-9279-46E1-96D7-1D4F9F460F78.html",
							"GUID-9E164756-9279-46E1-96D7-1D4F9F460F78.html",
							"GUID-9E164756-9279-46E1-96D7-1D4F9F460F78.html",
							"GUID-9E164756-9279-46E1-96D7-1D4F9F460F78.html",
							"GUID-78192F7A-E548-4CA5-9BED-84ED998280A2.html",
							"GUID-78192F7A-E548-4CA5-9BED-84ED998280A2.html",
							"GUID-78192F7A-E548-4CA5-9BED-84ED998280A2.html",
							"GUID-78192F7A-E548-4CA5-9BED-84ED998280A2.html",
							"GUID-78192F7A-E548-4CA5-9BED-84ED998280A2.html",
							"GUID-E5D04EAD-51D1-4D47-8ADB-9AD8BB1A700C.html",
							"GUID-E5D04EAD-51D1-4D47-8ADB-9AD8BB1A700C.html",
							"GUID-E5D04EAD-51D1-4D47-8ADB-9AD8BB1A700C.html",
							"GUID-E5D04EAD-51D1-4D47-8ADB-9AD8BB1A700C.html",
							"GUID-E5D04EAD-51D1-4D47-8ADB-9AD8BB1A700C.html",
							"GUID-E5D04EAD-51D1-4D47-8ADB-9AD8BB1A700C.html",
							"GUID-E5D04EAD-51D1-4D47-8ADB-9AD8BB1A700C.html",
							"GUID-4E41A963-CE42-4337-A4F7-7B6F4F6C4298.html",
							"GUID-68E8D0A3-9E94-4C43-BE0E-646C0FF1ED5D.html",
							"GUID-68E8D0A3-9E94-4C43-BE0E-646C0FF1ED5D.html",
							"GUID-68E8D0A3-9E94-4C43-BE0E-646C0FF1ED5D.html",
							"GUID-541D141F-C0A2-4E43-98EA-602C80C05F58.html",
							"GUID-658CA5E0-6127-4E31-8626-3E88161483DC.html",
							"GUID-7AD2548F-606B-4F25-A71F-5B555FF3D4A7.html",
							"GUID-49316BE3-AC2F-4E11-AE94-1E35E949F3B2.html",
							"GUID-955C3E8C-7967-49D9-A353-AE0486131D1C.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-4ABAE224-6F7D-47D1-ACBE-5DE2FD598301.html",
							"GUID-0F3F81B8-4EC2-400B-BA38-648D7FD12A61.html",
							"GUID-0F3F81B8-4EC2-400B-BA38-648D7FD12A61.html",
							"GUID-0F3F81B8-4EC2-400B-BA38-648D7FD12A61.html",
							"GUID-0F3F81B8-4EC2-400B-BA38-648D7FD12A61.html",
							"GUID-0F3F81B8-4EC2-400B-BA38-648D7FD12A61.html",
							"GUID-0F3F81B8-4EC2-400B-BA38-648D7FD12A61.html",
							"GUID-0F3F81B8-4EC2-400B-BA38-648D7FD12A61.html",
							"GUID-0F3F81B8-4EC2-400B-BA38-648D7FD12A61.html",
							"GUID-9529805E-7FC7-420D-8DC2-49600780BC69.html",
							"GUID-9529805E-7FC7-420D-8DC2-49600780BC69.html",
							"GUID-9529805E-7FC7-420D-8DC2-49600780BC69.html",
							"GUID-27AD4A89-B663-48BD-ADA8-F36812640DB7.html",
							"GUID-A24A649B-14FE-4938-8BF3-AFDD3F36E2D2.html",
							"GUID-E3159AC0-44A2-4304-9ED7-75C30606A4F3.html",
							"GUID-CF0832B7-23E1-4E35-A1DE-7FC82194FDD6.html",
							"GUID-CF0832B7-23E1-4E35-A1DE-7FC82194FDD6.html",
							"GUID-CF0832B7-23E1-4E35-A1DE-7FC82194FDD6.html",
							"GUID-62FC0E1E-3C98-45A0-A7D8-A40A1F58A004.html",
							"GUID-617E4AF5-AFBF-4AD8-A694-D17E347A103E.html",
							"GUID-423A02F6-C40D-47FD-A330-B86AD684E2F1.html",
							"GUID-E623850D-7676-4ACC-A8BE-634D53B4BF5C.html",
							"GUID-C3E09031-D714-4F59-8C0D-5AD6C31F7129.html",
							"GUID-B5D94855-68C3-41B9-8499-44E0ED492759.html",
							"GUID-11B187F2-A2D5-4004-8085-4E1960FF2510.html",
							"GUID-29322041-5FEE-440A-86ED-FF758E26DF94.html",
							"GUID-4179DE5D-7260-49E4-B8A3-D7954299ADCB.html",
							"GUID-75D92290-831A-4383-BDF2-FBDB8F6E651B.html",
							"GUID-F6C1AEC3-D21B-440A-9AF7-40CE3A8C6251.html",
							"GUID-D13DB96E-629F-4533-A72D-FA069843DEE9.html",
							"GUID-D13DB96E-629F-4533-A72D-FA069843DEE9.html",
							"GUID-D13DB96E-629F-4533-A72D-FA069843DEE9.html",
							"GUID-D13DB96E-629F-4533-A72D-FA069843DEE9.html",
							"GUID-D13DB96E-629F-4533-A72D-FA069843DEE9.html",
							"GUID-D13DB96E-629F-4533-A72D-FA069843DEE9.html",
							"GUID-D13DB96E-629F-4533-A72D-FA069843DEE9.html",
							"GUID-D13DB96E-629F-4533-A72D-FA069843DEE9.html",
							"GUID-D13DB96E-629F-4533-A72D-FA069843DEE9.html",
							"GUID-D13DB96E-629F-4533-A72D-FA069843DEE9.html",
							"GUID-D13DB96E-629F-4533-A72D-FA069843DEE9.html",
							"GUID-D13DB96E-629F-4533-A72D-FA069843DEE9.html",
							"GUID-D13DB96E-629F-4533-A72D-FA069843DEE9.html",
							"GUID-D13DB96E-629F-4533-A72D-FA069843DEE9.html",
							"GUID-D13DB96E-629F-4533-A72D-FA069843DEE9.html",
							"GUID-D13DB96E-629F-4533-A72D-FA069843DEE9.html",
							"GUID-D13DB96E-629F-4533-A72D-FA069843DEE9.html",
							"GUID-D13DB96E-629F-4533-A72D-FA069843DEE9.html",
							"GUID-D13DB96E-629F-4533-A72D-FA069843DEE9.html",
							"GUID-D13DB96E-629F-4533-A72D-FA069843DEE9.html",
							"GUID-D13DB96E-629F-4533-A72D-FA069843DEE9.html",
							"GUID-D13DB96E-629F-4533-A72D-FA069843DEE9.html",
							"GUID-0CD99E9B-6954-42F9-8CA8-5E92D55DAEB8.html",
							"GUID-0CD99E9B-6954-42F9-8CA8-5E92D55DAEB8.html",
							"GUID-0CD99E9B-6954-42F9-8CA8-5E92D55DAEB8.html",
							"GUID-0CD99E9B-6954-42F9-8CA8-5E92D55DAEB8.html",
							"GUID-0CD99E9B-6954-42F9-8CA8-5E92D55DAEB8.html",
							"GUID-0CD99E9B-6954-42F9-8CA8-5E92D55DAEB8.html",
							"GUID-0CD99E9B-6954-42F9-8CA8-5E92D55DAEB8.html",
							"GUID-0CD99E9B-6954-42F9-8CA8-5E92D55DAEB8.html",
							"GUID-0CD99E9B-6954-42F9-8CA8-5E92D55DAEB8.html",
							"GUID-0CD99E9B-6954-42F9-8CA8-5E92D55DAEB8.html",
							"GUID-0CD99E9B-6954-42F9-8CA8-5E92D55DAEB8.html",
							"GUID-0CD99E9B-6954-42F9-8CA8-5E92D55DAEB8.html",
							"GUID-0CD99E9B-6954-42F9-8CA8-5E92D55DAEB8.html",
							"GUID-0CD99E9B-6954-42F9-8CA8-5E92D55DAEB8.html",
							"GUID-0CD99E9B-6954-42F9-8CA8-5E92D55DAEB8.html",
							"GUID-0CD99E9B-6954-42F9-8CA8-5E92D55DAEB8.html",
							"GUID-0CD99E9B-6954-42F9-8CA8-5E92D55DAEB8.html",
							"GUID-0CD99E9B-6954-42F9-8CA8-5E92D55DAEB8.html",
							"GUID-0CD99E9B-6954-42F9-8CA8-5E92D55DAEB8.html",
							"GUID-0CD99E9B-6954-42F9-8CA8-5E92D55DAEB8.html",
							"GUID-0CD99E9B-6954-42F9-8CA8-5E92D55DAEB8.html",
							"GUID-0CD99E9B-6954-42F9-8CA8-5E92D55DAEB8.html",
							"GUID-862E7BA5-9BC0-413B-8702-BE39DD70C671.html",
							"GUID-862E7BA5-9BC0-413B-8702-BE39DD70C671.html",
							"GUID-862E7BA5-9BC0-413B-8702-BE39DD70C671.html",
							"GUID-862E7BA5-9BC0-413B-8702-BE39DD70C671.html",
							"GUID-862E7BA5-9BC0-413B-8702-BE39DD70C671.html",
							"GUID-862E7BA5-9BC0-413B-8702-BE39DD70C671.html",
							"GUID-862E7BA5-9BC0-413B-8702-BE39DD70C671.html",
							"GUID-862E7BA5-9BC0-413B-8702-BE39DD70C671.html",
							"GUID-98974C20-3195-4C76-84CF-C5DD8C246505.html",
							"GUID-98974C20-3195-4C76-84CF-C5DD8C246505.html",
							"GUID-98974C20-3195-4C76-84CF-C5DD8C246505.html",
							"GUID-98974C20-3195-4C76-84CF-C5DD8C246505.html",
							"GUID-98974C20-3195-4C76-84CF-C5DD8C246505.html",
							"GUID-98974C20-3195-4C76-84CF-C5DD8C246505.html",
							"GUID-98974C20-3195-4C76-84CF-C5DD8C246505.html",
							"GUID-98974C20-3195-4C76-84CF-C5DD8C246505.html",
							"GUID-98974C20-3195-4C76-84CF-C5DD8C246505.html",
							"GUID-98974C20-3195-4C76-84CF-C5DD8C246505.html",
							"GUID-98974C20-3195-4C76-84CF-C5DD8C246505.html",
							"GUID-98974C20-3195-4C76-84CF-C5DD8C246505.html",
							"GUID-98974C20-3195-4C76-84CF-C5DD8C246505.html",
							"GUID-98974C20-3195-4C76-84CF-C5DD8C246505.html",
							"GUID-98974C20-3195-4C76-84CF-C5DD8C246505.html",
							"GUID-98974C20-3195-4C76-84CF-C5DD8C246505.html",
							"GUID-98974C20-3195-4C76-84CF-C5DD8C246505.html",
							"GUID-98974C20-3195-4C76-84CF-C5DD8C246505.html",
							"GUID-98974C20-3195-4C76-84CF-C5DD8C246505.html",
							"GUID-E20D971E-D45E-41BE-8598-2DFA10C5FF8A.html",
							"GUID-E20D971E-D45E-41BE-8598-2DFA10C5FF8A.html",
							"GUID-E20D971E-D45E-41BE-8598-2DFA10C5FF8A.html",
							"GUID-F08B6414-2101-4047-8526-7B5F184D6CA3.html",
							"GUID-F08B6414-2101-4047-8526-7B5F184D6CA3.html",
							"GUID-F08B6414-2101-4047-8526-7B5F184D6CA3.html",
							"GUID-F08B6414-2101-4047-8526-7B5F184D6CA3.html",
							"GUID-F08B6414-2101-4047-8526-7B5F184D6CA3.html",
							"GUID-F08B6414-2101-4047-8526-7B5F184D6CA3.html",
							"GUID-F08B6414-2101-4047-8526-7B5F184D6CA3.html"];

var SearchTitles = ["MPLAB® Harmony License",
"Harmony 3 Wireless application examples for WINC3400",
"Contents Summary",
"Code Examples",
"Documentation",
"WINC STA Bypass Demo Application",
"Description",
"Downloading and building the application",
"Setting up SAME54 Xplained Pro board",
"Running the Application",
"How to create this project from scratch",
"TCP Server in SoftAP",
"Description",
"Downloading and building the application",
"Setting up SAMXXX Xplained Pro board",
"Running the Application",
"Wifi Provisioning via WPS",
"Description",
"Downloading and building the application",
"Setting up SAMXXX Xplained Pro board",
"Running the Application",
"Wifi Provisioning via SoftAP",
"Description",
"Downloading and building the application",
"Setting up SAMXXX Xplained Pro board",
"Running the Application",
"Wi-Fi provisioning using BLE",
"Description",
"Downloading and building the application",
"Setting up SAMXXX Xplained Pro board",
"Running the Application",
"TCP Client",
"Description",
"Downloading and building the application",
"Setting up SAMXXX Xplained Pro board",
"Running the Application",
"Power Save Mode",
"Description",
"Downloading and building the application",
"Setting up SAMXXX Xplained Pro board",
"Running the Application",
"AP Scan",
"Description",
"Downloading and building the application",
"Setting up SAMXXX Xplained Pro board",
"Running the Application",
"WINC3400 Bypass Mode Demo Applications",
"Description",
"Downloading and building the application",
"Setting up SAMXXX Xplained Pro board",
"Running the Application",
"List of Applications",
"Steps to isolate/copy individual application(s) from the demo",
"WiFi Provisioning",
"WiFi Station Mode / Access Point Mode Demo",
"Station Mode",
"Access Point Mode",
"SSL Demo",
"SNTP Demo",
"Ping Demo",
"MQTT Demo",
"Iperf Demo",
"Create your first WINC3400 Bypass mode example using Harmony TCP/IP stack",
"Overview",
"Software Details",
"Hardware Setup",
"Creating a new Harmony project",
"Add TCP/IP Components",
"Application Layer Configurator",
"Transport Layer Configurator",
"Network Layer Configurator",
"Driver Layer Configurator",
"Basic Configuration",
"Satisfying Module Dependencies",
"Satisfy Timer dependency:",
"Satisfy Console dependency:",
"Satisfy TCP/IP Stack's (i e WINC's) SPI dependency:",
"Satisfy Transport Layer LIB_CRYPTO Dependency:",
"Satisfy WINC's External Interrupt dependency:",
"Project Heap Configuration",
"WINC Driver Configuration",
"Pin Configuration",
"Code Generation",
"Application Coding",
"Build the Application",
"Program the Application",
"Test the Application",
"References",
"WINC3400 Socket Mode Demo Applications",
"Description",
"Downloading and building the application",
"Setting up SAMXXX Xplained Pro board",
"Running the Application",
"List of Applications",
"Steps to isolate/copy individual application(s) from the demo",
"Steps to isolate/copy individual BLE application(s) from the demo",
"Wi-Fi BLE Connectionless Gateway Demo",
"Description",
"Wi-Fi BLE Connectionless Gateway Demo",
"WiFi Provisioning via microchip android application",
"WiFi Provisioning via BLE",
"Transparent Service Application Demo",
"WiFi Station Mode / Access Point Mode Demo",
"Station Mode",
"Access Point Mode",
"SSL Demo",
"SNTP Demo",
"Proximity Reporter Application Demo",
"Ping Demo",
"OTA Demo",
"MQTT Demo",
"Iperf Demo",
"Heart Rate Profile Application Demo",
"Custom Serial Chat Application Demo",
"Certificate Download OTA Demo",
"Battery Service Application Demo",
"Example project creation - WINC3400 Socket mode project with SAMD21",
"Hardware Setup",
"Steps to create the new example project",
"Project Creation",
"Project Selection",
"Framework Selection",
"Project Settings",
"Configuration Settings",
"Adding components in MH3",
"Core",
"SAMD21 Xplained pro component",
"Timer component",
"EIC component",
"Virtual Console",
"To add COMMAND component",
"SPI component",
"WINC Component",
"MHC PIN Configuration",
"Save and generate code",
"Application Code",
"Build and program the device",
"Output",
"Example project creation - WINC3400 Socket mode project with SAME54",
"Hardware Setup",
"Steps to create the new example project",
"Project Creation",
"Project Selection",
"Framework Selection",
"Project Settings",
"Configuration Settings",
"Adding components in MH3",
"Core",
"SAME54 Xplained pro component",
"Timer component",
"EIC component",
"Virtual Console",
"To add COMMAND component",
"SPI component",
"WINC Component",
"MHC PIN Configuration",
"Save and generate code",
"Application Code",
"Build and program the device",
"Output",
"Create WINC Project - Getting Started",
"Download wireless repository from Github",
"Pin mapping between host and WINC",
"SPI interface",
"Power up pins",
"WINC1500 Power up pins",
"WINC3400 Power up pins",
"Interrupt pin",
"WINC Devices – Integrated Serial Flash Memory Download Procedure",
"Introduction",
"Firmware update project",
"Download wireless repository from Github",
"Hardware Setup",
"Serial Bridge Application",
"Serial Bridge Application for Harmony 3",
"Hardware Setup",
"General Information on Firmware Update",
"Scripts",
"Commands Logs",
"ATWINC1500/ATWINC3400 Binary Tools",
"Building Firmware Image",
"image_tool Usage",
"Commands Logs",
"Programming Firmware Image",
"winc_programmer_uart Tool Usage",
"Commands logs",
"Download Failure Troubleshooting",
"Supported Network Modes in WINC",
"Socket Mode",
"Bypass Mode",
"Microchip MPLAB® Harmony 3 Release Notes",
"Harmony 3 Wireless application examples for WINC3400 v3 4 2",
"Development kit and demo application support",
"New Features",
"Bug fixes",
"Known Issues",
"Development Tools"];

var SearchInfo = [" MPLAB® Harmony License IMPORTANT: READ CAREFULLY MICROCHIP IS WILLING TO LICENSE THIS INTEGRATED SOFTWARE FRAMEWORK SOFTWARE AND ACCOMPANYING DOCUMENTATION OFFERED TO YOU ONLY ON THE CONDITION THAT YOU ACCEPT ALL OF THE FOLLOWING TERMS TO ACCEPT THE TERMS OF THIS LICENSE CLICK \"I ACCEPT\" AND PROCEED WITH THE DOWNLOAD OR INSTALL IF YOU DO NOT ACCEPT THESE LICENSE TERMS CLICK \"I DO NOT ACCEPT \" AND DO NOT DOWNLOAD OR INSTALL THIS SOFTWARE NON-EXCLUSIVE SOFTWARE LICENSE AGREEMENT FOR MICROCHIP MPLAB HARMONY INTEGRATED SOFTWARE FRAMEWORK This Nonexclusive Software License Agreement (\"Agreement\") is between you your heirs agents successors and assigns (\"Licensee\") and Microchip Technology Incorporated a Delaware corporation with a principal place of business at 2355 W Chandler Blvd Chandler AZ 85224-6199 and its subsidiary Microchip Technology (Barbados) II Incorporated (collectively \"Microchip\") for Microchip's MPLAB Harmony Integrated Software Framework (\"Software\") and accompanying documentation (\"Documentation\") The Software and Documentation are licensed under this Agreement and not sold U S copyright laws and international copyright treaties and other intellectual property laws and treaties protect the Software and Documentation Microchip reserves all rights not expressly granted to Licensee in this Agreement License and Sublicense Grant (a) Definitions As used this Agreement the following terms shall have the meanings defined below: (i) \"Licensee Products\" means Licensee products that use or incorporate Microchip Products (ii) \"Microchip Product\" means Microchip 16-bit and 32-bit microcontrollers digital signal controllers or other Microchip semiconductor products with PIC16 and PIC18 prefix and specifically excepting the CX870 and CY920 which are not covered under this Agreement that use or implement the Software (iii) \"Object Code\" means the Software computer programming code provided by Microchip that is in binary form (including related documentation if any) and error corrections improvements and updates to such code provided by Microchip in its sole discretion if any (iv) \"Source Code\" means the Software computer programming code provided by Microchip that may be printed out or displayed in human readable form (including related programmer comments and documentation if any) and error corrections improvements updates modifications and derivatives of such code developed by Microchip Licensee or Third Party (v) \"Third Party\" means Licensee's agents representatives consultants clients customers or contract manufacturers (vi) \"Third Party Products\" means Third Party products that use or incorporate Microchip Products (b) Software License Grant Subject to the terms of this Agreement Microchip grants strictly to Licensee a personal worldwide non-exclusive non-transferable limited license to use modify (except as limited by Section 1(f) below) copy and distribute the Software only when the Software is embedded on a Microchip Product that is integrated into Licensee Product or Third Party Product pursuant to Section 2(d) below Any portion of the Software (including derivatives or modifications thereof) may not be: (i) embedded on a non-Microchip microcontroller or digital signal controller; (ii) distributed (in Source Code or Object Code) except as described in Section 2(d) below (c) Documentation License Grant Subject to all of the terms and conditions of this Agreement Microchip grants strictly to Licensee a perpetual worldwide non-exclusive license to use the Documentation in support of Licensee's use of the Software (d) Sublicense Grants Subject to terms of this Agreement Licensee may grant a limited sublicense to a Third Party to use the Software as described below only if such Third Party expressly agrees to be bound by terms of confidentiality and limited use that are no broader in scope and duration than the confidentiality and limited use terms of this Agreement: (i) Third Party may modify Source Code for Licensee except as limited by Section 1(f) below (ii) Third Party may program Software into Microchip Products for Licensee (iii) Third Party may use Software to develop and/or manufacture Licensee Product (iv) Third Party may use Software to develop and/or manufacture Third Party Products where either: (x) the sublicensed Software contains Source Code modified or otherwise optimized by Licensee for Third Party use; or (y) the sublicensed Software is programmed into Microchip Products by Licensee on behalf of such Third Party (v) Third Party may use the Documentation in support of Third Party's authorized use of the Software in conformance with this Section 2(d) (e) Audit Authorized representatives of Microchip shall have the right to reasonably inspect Licensee's premises and to audit Licensee's records and inventory of Licensee Products whether located on Licensee's premises or elsewhere at any time announced or unannounced and in its sole and absolute discretion in order to ensure Licensee's adherence to the terms of this Agreement (f) License and Sublicense Limitation This Section 1 does not grant Licensee or any Third Party the right to modify any dotstack™ Bluetooth® stack profile or iAP protocol included in the Software Third Party Requirements Licensee acknowledges that it is Licensee's responsibility to comply with any third party license terms or requirements applicable to the use of such third party software specifications systems or tools including but not limited to SEGGER Microcontroller GmbH Co KG's rights in the emWin software and certain libraries included herein Microchip is not responsible and will not be held responsible in any manner for Licensee's failure to comply with such applicable terms or requirements Open Source Components Notwithstanding the license grants contained herein Licensee acknowledges that certain components of the Software may be covered by so-called \"open source\" software licenses (\"Open Source Components\") Open Source Components means any software licenses approved as open source licenses by the Open Source Initiative or any substantially similar licenses including any license that as a condition of distribution requires Microchip to provide Licensee with certain notices and/or information related to such Open Source Components or requires that the distributor make the software available in source code format Microchip will use commercially reasonable efforts to identify such Open Source Components in a text file or \"About Box\" or in a file or files referenced thereby (and will include any associated license agreement notices and other related information therein) or the Open Source Components will contain or be accompanied by its own license agreement To the extent required by the licenses covering Open Source Components the terms of such licenses will apply in lieu of the terms of this Agreement and Microchip hereby represents and warrants that the licenses granted to such Open Source Components will be no less broad than the license granted in Section 1(b) To the extent the terms of the licenses applicable to Open Source Components prohibit any of the restrictions in this Agreement with respect to such Open Source Components such restrictions will not apply to such Open Source Components Licensee's Obligations (a) Licensee will ensure Third Party compliance with the terms of this Agreement (b) Licensee will not: (i) engage in unauthorized use modification disclosure or distribution of Software or Documentation or its derivatives; (ii) use all or any portion of the Software Documentation or its derivatives except in conjunction with Microchip Products; or (iii) reverse engineer (by disassembly decompilation or otherwise) Software or any portion thereof; or (iv) copy or reproduce all or any portion of Software except as specifically allowed by this Agreement or expressly permitted by applicable law notwithstanding the foregoing limitations (c) Licensee must include Microchip's copyright trademark and other proprietary notices in all copies of the Software Documentation and its derivatives Licensee may not remove or alter any Microchip copyright or other proprietary rights notice posted in any portion of the Software or Documentation (d) Licensee will defend indemnify and hold Microchip and its subsidiaries harmless from and against any and all claims costs damages expenses (including reasonable attorney's fees) liabilities and losses including without limitation product liability claims directly or indirectly arising from or related to: (i) the use modification disclosure or distribution of the Software Documentation or any intellectual property rights related thereto; (ii) the use sale and distribution of Licensee Products or Third Party Products and (iii) breach of this Agreement THE FOREGOING STATES THE SOLE AND EXCLUSIVE LIABILITY OF THE PARTIES FOR INTELLECTUAL PROPERTY RIGHTS INFRINGEMENT Confidentiality (a) Licensee agrees that the Software (including but not limited to the Source Code Object Code and library files) and its derivatives Documentation and underlying inventions algorithms know-how and ideas relating to the Software and the Documentation are proprietary information belonging to Microchip and its licensors (\"Proprietary Information\") Except as expressly and unambiguously allowed herein Licensee will hold in confidence and not use or disclose any Proprietary Information and shall similarly bind its employees and Third Party(ies) in writing Proprietary Information shall not include information that: (i) is in or enters the public domain without breach of this Agreement and through no fault of the receiving party; (ii) the receiving party was legally in possession of prior to receiving it; (iii) the receiving party can demonstrate was developed by it independently and without use of or reference to the disclosing party's Proprietary Information; or (iv) the receiving party receives from a third party without restriction on disclosure If Licensee is required to disclose Proprietary Information by law court order or government agency such disclosure shall not be deemed a breach of this Agreement provided that Licensee gives Microchip prompt notice of such requirement in order to allow Microchip to object or limit such disclosure Licensee cooperates with Microchip to protect Proprietary Information and Licensee complies with any protective order in place and discloses only the information required by process of law (b) Licensee agrees that the provisions of this Agreement regarding unauthorized use and nondisclosure of the Software Documentation and related Proprietary Rights are necessary to protect the legitimate business interests of Microchip and its licensors and that monetary damages alone cannot adequately compensate Microchip or its licensors if such provisions are violated Licensee therefore agrees that if Microchip alleges that Licensee or Third Party has breached or violated such provision then Microchip will have the right to petition for injunctive relief without the requirement for the posting of a bond in addition to all other remedies at law or in equity Ownership of Proprietary Rights (a) Microchip and its licensors retain all right title and interest in and to the Software and Documentation (\"Proprietary Rights\") including but not limited to: (i) patent copyright trade secret and other intellectual property rights in the Software Documentation and underlying technology; (ii) the Software as implemented in any device or system all hardware and software implementations of the Software technology (expressly excluding Licensee and Third Party code developed and used in conformance with this Agreement solely to interface with the Software and Licensee Products and/or Third Party Products); and (iii) all modifications and derivative works thereof (by whomever produced) Further modifications and derivative works shall be considered works made for hire with ownership vesting in Microchip on creation To the extent such modifications and derivatives do not qualify as a \"work for hire \" Licensee hereby irrevocably transfers assigns and conveys the exclusive copyright thereof to Microchip free and clear of any and all liens claims or other encumbrances to the fullest extent permitted by law Licensee and Third Party use of such modifications and derivatives is limited to the license rights described in Section 1 above (b) Licensee shall have no right to sell assign or otherwise transfer all or any portion of the Software Documentation or any related intellectual property rights except as expressly set forth in this Agreement Termination of Agreement Without prejudice to any other rights this Agreement terminates immediately without notice by Microchip upon a failure by License or Third Party to comply with any provision of this Agreement Further Microchip may also terminate this Agreement upon reasonable belief that Licensee or Third Party have failed to comply with this Agreement Upon termination Licensee and Third Party will immediately stop using the Software Documentation and derivatives thereof and immediately destroy all such copies remove Software from any of Licensee's tangible media and from systems on which the Software exists and stop using disclosing copying or reproducing Software (even as may be permitted by this Agreement) Termination of this Agreement will not affect the right of any end user or consumer to use Licensee Products or Third Party Products provided that such products were purchased prior to the termination of this Agreement Dangerous Applications The Software is not fault-tolerant and is not designed manufactured or intended for use in hazardous environments requiring failsafe performance (\"Dangerous Applications\") Dangerous Applications include the operation of nuclear facilities aircraft navigation aircraft communication systems air traffic control direct life support machines weapons systems or any environment or system in which the failure of the Software could lead directly or indirectly to death personal injury or severe physical or environmental damage Microchip specifically disclaims (a) any express or implied warranty of fitness for use of the Software in Dangerous Applications; and (b) any and all liability for loss damages and claims resulting from the use of the Software in Dangerous Applications Warranties and Disclaimers THE SOFTWARE AND DOCUMENTATION ARE PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY KIND EITHER EXPRESS OR IMPLIED INCLUDING WITHOUT LIMITATION ANY WARRANTY OF MERCHANTABILITY TITLE NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE MICROCHIP AND ITS LICENSORS ASSUME NO RESPONSIBILITY FOR THE ACCURACY RELIABILITY OR APPLICATION OF THE SOFTWARE OR DOCUMENTATION MICROCHIP AND ITS LICENSORS DO NOT WARRANT THAT THE SOFTWARE WILL MEET REQUIREMENTS OF LICENSEE OR THIRD PARTY BE UNINTERRUPTED OR ERROR-FREE MICROCHIP AND ITS LICENSORS HAVE NO OBLIGATION TO CORRECT ANY DEFECTS IN THE SOFTWARE LICENSEE AND THIRD PARTY ASSUME THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE AND DOCUMENTATION PROVIDED UNDER THIS AGREEMENT Limited Liability IN NO EVENT SHALL MICROCHIP OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT NEGLIGENCE STRICT LIABILITY CONTRIBUTION BREACH OF WARRANTY OR OTHER LEGAL OR EQUITABLE THEORY FOR ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO INCIDENTAL SPECIAL INDIRECT PUNITIVE OR CONSEQUENTIAL DAMAGES LOST PROFITS OR LOST DATA COST OF PROCUREMENT OF SUBSTITUTE GOODS TECHNOLOGY SERVICES OR ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF) OR OTHER SIMILAR COSTS The aggregate and cumulative liability of Microchip and its licensors for damages hereunder will in no event exceed $1000 or the amount Licensee paid Microchip for the Software and Documentation whichever is greater Licensee acknowledges that the foregoing limitations are reasonable and an essential part of this Agreement General (a) Governing Law Venue and Waiver of Trial by Jury THIS AGREEMENT SHALL BE GOVERNED BY AND CONSTRUED UNDER THE LAWS OF THE STATE OF ARIZONA AND THE UNITED STATES WITHOUT REGARD TO CONFLICTS OF LAWS PROVISIONS Licensee agrees that any disputes arising out of or related to this Agreement Software or Documentation shall be brought in the courts of State of Arizona The parties agree to waive their rights to a jury trial in actions relating to this Agreement (b) Attorneys' Fees If either Microchip or Licensee employs attorneys to enforce any rights arising out of or relating to this Agreement the prevailing party shall be entitled to recover its reasonable attorneys' fees costs and other expenses (c) Entire Agreement This Agreement shall constitute the entire agreement between the parties with respect to the subject matter hereof It shall not be modified except by a written agreement signed by an authorized representative of Microchip (d) Severability If any provision of this Agreement shall be held by a court of competent jurisdiction to be illegal invalid or unenforceable that provision shall be limited or eliminated to the minimum extent necessary so that this Agreement shall otherwise remain in full force and effect and enforceable (e) Waiver No waiver of any breach of any provision of this Agreement shall constitute a waiver of any prior concurrent or subsequent breach of the same or any other provisions hereof and no waiver shall be effective unless made in writing and signed by an authorized representative of the waiving party (f) Export Regulation Licensee agrees to comply with all export laws and restrictions and regulations of the Department of Commerce or other United States or foreign agency or authority (g) Survival The indemnities obligations of confidentiality and limitations on liability described herein and any right of action for breach of this Agreement prior to termination shall survive any termination of this Agreement (h) Assignment Neither this Agreement nor any rights licenses or obligations hereunder may be assigned by Licensee without the prior written approval of Microchip except pursuant to a merger sale of all assets of Licensee or other corporate reorganization provided that assignee agrees in writing to be bound by the Agreement (i) Restricted Rights Use duplication or disclosure by the United States Government is subject to restrictions set forth in subparagraphs (a) through (d) of the Commercial Computer-Restricted Rights clause of FAR 52 227-19 when applicable or in subparagraph (c)(1)(ii) of the Rights in Technical Data and Computer Software clause at DFARS 252 227-7013 and in similar clauses in the NASA FAR Supplement Contractor/manufacturer is Microchip Technology Inc 2355 W Chandler Blvd Chandler AZ 85225-6199 If Licensee has any questions about this Agreement please write to Microchip Technology Inc 2355 W Chandler Blvd Chandler AZ 85224-6199 USA ATTN: Marketing Microchip MPLAB Harmony Integrated Software Framework Copyright © 2015 Microchip Technology Inc All rights reserved License Rev 11/2015 Copyright © 2015 Qualcomm Atheros Inc All Rights Reserved Permission to use copy modify and/or distribute this software for any purpose with or without fee is hereby granted provided that the above copyright notice and this permission notice appear in all copies THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL DIRECT INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE DATA OR PROFITS WHETHER IN AN ACTION OF CONTRACT NEGLIGENCE OR OTHER TORTIOUS ACTION ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE ",
							" Harmony 3 Wireless application examples for WINC3400 MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC® microcontroller and microprocessor devices Refer to the following links for more information Microchip 32-bit MCUs Microchip 32-bit MPUs Microchip MPLAB X IDE Microchip MPLAB® Harmony Microchip MPLAB® Harmony Pages This repository contains the MPLAB® Harmony 3 Wireless application examples for WINC3400 Release Notes MPLAB® Harmony License To clone or download these applications from Github go to the main page of this repository and then click Clone button to clone this repository or download as zip file This content can also be downloaded using content manager by following these instructions  ",
							" Contents Summary Folder Description apps Contains Wireless service example applications docs Contains documentation in html format for offline viewing (to be used only after cloning this repository onto a local machine) Use github pages of this repository for viewing it online ",
							" Code Examples The following applications are provided to demonstrate the typical or interesting usage models of one or more wireless usecases Name Description AP Scan (Socket mode) Demonstrates scan of near by HomeAP’s and connects to configured HomeAP TCP Client (Socket mode) Demonstrates WINC3400 TCP Client example application TCP Server (Socket mode) Demonstrates WINC3400 TCP Server example application Wi-Fi Provisioning using SoftAP (Socket mode) Demonstrates WINC3400 HomeAP Provisioning using SoftAP Wi-Fi Provisioning using WPS (Socket mode) Demonstrates WINC3400 HomeAP Provisioning using WPS Wi-Fi Provisioning using BLE (Socket mode) Demonstrates WINC3400 HomeAP Provisioning using BLE Wi-Fi STA (Bypass/Ethernet mode) Demonstrates WINC3400 STA Bypass Ethenet mode application Power Save Mode Demonstrates WINC3400 low power modes Wi-Fi Bypass Mode Demos Demonstrates the below WINC3400 applications in Bypass Mode WiFi station mode/Access point mode demo SSL Demo Ping Demo Iperf Demo SNTP Demo MQTT Demo WiFi Provisioning Demo Wi-Fi Socket Mode Demos Demonstrates the below WINC3400 applications in Socket Mode WiFi station mode/Access point mode demo SSL Demo Ping Demo Iperf Demo SNTP Demo MQTT Demo OTA Demo WiFi Provisioning Demo WiFi Provisioning via BLE Custom serial Chat Demo Heart Rate Profile Demo Battery Service Demo Proximity Reporter Demo Transparent Service Demo Certificate Download OTA Demo WiFi BLE Connectionless Gateway Demo ",
							" Documentation Mode Document Description  Create WINC Project - Getting Started This is a getting-started guide for MPLABX IDE  Firmware Upgrade of WINC Devices This document explains in detail downloading procedure of firmware certificate and gain values into WINC serial flash through different supported serial interfaces like UART/I2C  Supported Modes In WINC devices Describes the supported modes in WINC devices Socket Mode WINC3400+SAMD21 This document explains a step by step approach to create a WINC3400 Socket mode project with SAMD21 host Socket Mode WINC3400+SAME54 This document explains a step by step approach to create a WINC3400 Socket mode project with SAME54 host Bypass Mode WINC3400+SAME54 This document explains a step by step approach to create a WINC3400 Bypass mode project with SAME54 host ",
							" WINC STA Bypass Demo Application This example compiles the WINC STA Bypass application ",
							" Description This example implements a simple STA Client application on the SAM E54 Xplained Pro board with the ATWINC1500/3400 XPRO board where the WINC controller is in Bypass/Ethernet mode ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/wifi_winc_sta_bypass/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description sam_e54_xpro_winc3400 X MPLABX project for SAME54 and WINC3400 Xplained pro ",
							" Setting up SAME54 Xplained Pro board Connect the ATWINCxx00 Xpro Wi-Fi board to EXT1 XPRO Header of SAME54 Xplained baord Connect the Debug USB port on the SAME54 Xplained Pro board to the computer using a micro USB cable ",
							" Running the Application Open the project in MPLAB® X IDE and open the app c file to change the access point parameters as shown in the picture below app_ap_parameters_2 Build and program the generated code into the hardware using its IDE by using on-board EDBG programmer Open a terminal application (eg: TeraTerm) and configure the baud rate for 115200  open_teraterm Press the Reset button on the SAM E54 Xplained Ultra board The following messages will be visible on the terminal window run_teraterm_outout_1 Type ping PC's IP address in the terminal window and press Enter to see responses run_teraterm_ping You can also ping this board from your PC using cmd prompt as shown below run_pc_cmd_ping ",
							" How to create this project from scratch Following Wireless Wiki tutorial shows step-by-step process to create this project from scratch Create WINC1500 bypass mode demo from scratch ",
							" TCP Server in SoftAP This example compiles the TCP Server in SoftAP application which is used to demonstrate a TCP Client-Server connection ",
							" Description In this demonstration the WINC Driver will advertise a SoftAP The SoftAP connection is used to demonstrate a TCP client-server operation ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/wifi_tcp_server_in_softap/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description sam_d21_xpro_winc3400 X MPLABX project for SAMD21 and WINC3400 Xplained pro sam_e54_xpro_winc3400 X MPLABX project for SAME54 and WINC3400 Xplained pro ",
							" Setting up SAMXXX Xplained Pro board Connect the Debug USB port on the SAMXXX Xplained Pro board to the computer using a micro USB cable ",
							" Running the Application Open the project Build and program the generated code into the hardware using its IDE Refer \"firmware update guide\" and \"WINC Driver Demonstrations\" for information ",
							" Wifi Provisioning via WPS This example compiles the Wifi Provisioning via WPS application which is used to provision a WiFi connection ",
							" Description In this demonstration the WINC Driver will move into WPS mode – PIN or PBC By activating the WPS mode in the AP concurrently a WiFi connection is established ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/wifi_provisioning_via_wps/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description sam_d21_xpro_winc3400 X MPLABX project for SAMD21 and WINC3400 Xplained pro ",
							" Setting up SAMXXX Xplained Pro board Connect the Debug USB port on the SAMXXX Xplained Pro board to the computer using a micro USB cable ",
							" Running the Application Open the project Build and program the generated code into the hardware using its IDE Please refer \"WINC Firmware Update Guide\" and \"WINC Driver Demonstrations\" for more information ",
							" Wifi Provisioning via SoftAP This example compiles the Wifi Provisioning via SoftAP application which is used to provision a WiFi connection ",
							" Description In this demonstration the WINC Driver will advertise a SoftAP The SoftAP connection is leveraged to provision a WiFi connection ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/wifi_provisioning_via_softap/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description sam_d21_xpro_winc3400 X MPLABX project for SAMD21 and WINC3400 Xplained pro ",
							" Setting up SAMXXX Xplained Pro board Connect the Debug USB port on the SAMXXX Xplained Pro board to the computer using a micro USB cable ",
							" Running the Application Open the project Build and program the generated code into the hardware using its IDE Please refer \"firmware update guide\" and \"WINC Driver Demonstrations\" for more information ",
							" Wi-Fi provisioning using BLE This example demonstrates how to pass the AP credentials to WINC3400 device via BLE ",
							" Description This application demonstrates how a user can pass the target AP credentials to WINC3400 device via BLE The user would need to use \"Microchip Bluetooth Data\" mobile application to pass the AP credentials to WINC3400 after pairing with the mobile ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/wifi_provision_via_ble/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description sam_e54_xpro_winc3400 X MPLABX project for SAME54 and WINC3400 Xplained pro sam_d21_xpro_winc3400 X MPLABX project for SAMD21 and WINC3400 Xplained pro ",
							" Setting up SAMXXX Xplained Pro board Connect the Debug USB port on the SAMEXXX Xplained Pro board to the computer using a micro USB cable ",
							" Running the Application Build and program the application project using its respective IDE Open the Terminal application (Ex :Tera term) on the computer Connect to the \"USB to UART\" COM port and configure the serial settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Download the Microchip Bluetooth Data application from App Store and open it The WINC3400 device will scan the APs and ready to get paired with Mobile application ble_scan In the Mobile Application Open the \"Ble provisioner\" widget wifi_prov_widget In the \"Ble provisioner\" widget press the \"scan\" button It will list the surrounding BLE devices scan The default name given for WINC3400 in the \"Wi-Fi provisioning using BLE\" application is \"Wifi Prov\" Click on \"Wifi Prov\" device select_device The next screen will display the scanned AP list provisioning Select the desired AP from the scan list and provide the required credentials to make Wi-Fi connection Press \"Provision\" button The mobile application will ask for the password to pair The password is stored in the \"pincode\" variable in the \"wifi_prov c\" file Enter the password to pair the WINC3400 device with mobile pairing The device will connect to the AP and print the IP address obtained ble_provisoing_full_log ",
							" TCP Client The WINC example application demonstrates as a conventional open tcp client-server communication ",
							" Description In this demonstration the WINC Driver will connect to a BSS and begin a TCP client socket connection to a remote server service This demonstration can be configured in the following ways in the source code The BSS to connect to The TCP server address and port to connect to The receive buffer size The message which should be sent as the first data once connected to the server ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/tcp_client/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description sam_d21_xpro_winc3400 X MPLABX project for SAMD21 and WINC3400 Xplained pro sam_e54_xpro_winc3400 X MPLABX project for SAME54 and WINC3400 Xplained pro ",
							" Setting up SAMXXX Xplained Pro board Connect the Debug USB port on the SAMXXX Xplained Pro board to the computer using a micro USB cable ",
							" Running the Application Open the project Build and program the generated code into the hardware using its IDE Refer \"firmware update guide\" and \"WINC Driver Demonstrations\" for information ",
							" Power Save Mode This example compiles the Power Save Mode application which is used to demonstrate WINC's low power mode ",
							" Description In this demonstration the WINC’s power save feature is demonstrated The Power save mode is demonstrated depending on the value configured in example_conf h - WDRV_WINC_PS_MODE_OFF WDRV_WINC_PS_MODE_AUTO_LOW_POWER and WDRV_WINC_PS_MODE_MANUAL ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/power_save_mode_example/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description sam_d21_xpro_winc3400 X MPLABX project for SAMD21 and WINC3400 Xplained pro sam_e54_xpro_winc3400 X MPLABX project for SAME54 and WINC3400 Xplained pro ",
							" Setting up SAMXXX Xplained Pro board Connect the Debug USB port on the SAMXXX Xplained Pro board to the computer using a micro USB cable ",
							" Running the Application Open the project Build and program the generated code into the hardware using its IDE Refer \"firmware update guide\" for information Please note this example will not output any console messages ",
							" AP Scan This example compiles the AP Scan application which is used to scan for available BSSs and display the list ",
							" Description AP Scan application is used to scan for available BSSs and display the list It sends out a scan requests and lists responses of all Access points along with their signal strength ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is apps/ap_scan/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description sam_d21_xpro_winc3400 X MPLABX project for SAMD21 and WINC3400 Xplained pro sam_e54_xpro_winc3400 X MPLABX project for SAME54 and WINC3400 Xplained pro ",
							" Setting up SAMXXX Xplained Pro board Connect the Debug USB port on the SAMXXX Xplained Pro board to the computer using a micro USB cable ",
							" Running the Application Open the project Build and program the generated code into the hardware using its IDE Refer \"firmware update guide\" and \"WINC Driver Demonstrations\" for information ",
							" WINC3400 Bypass Mode Demo Applications This example project demonstrates the WINC3400 WiFi applicationsin Bypass mode ",
							" Description This project has WiFi example applications The user can configure the WiFi parameters and select the required example application through command ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is wireless_apps_winc3400/apps/wifi_bypass_demos/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description sam_e54_xpro_winc3400 X MPLABX project for SAME54 and WINC3400 Xplained pro sam_e54_xpro_winc3400_freertos X MPLABX project for SAME54 and WINC3400 Xplained pro usinf FreeRTOS ",
							" Setting up SAMXXX Xplained Pro board Connect the Debug USB port on the SAMXXX Xplained Pro board to the computer using a micro USB cable ",
							" Running the Application Build and program the application project using its respective IDE Open the Terminal application (Ex :Tera term) on the computer Connect to the \"USB to UART\" COM port and configure the serial settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Use WiFi commands to configure WiFi parameters and use application commands to select the example application WiFi Commands Details Command Details Example wifi help Wi-Fi Service help command wifi help wifi set bootmode ssid_name auth_type pwd username/index Set Wi-Fi Configuration for Station(STA) mode or Access Point (AP) mode wifi set 2 DEMO_AP 2 12345678 wifi get Get Wi-Fi Configuration wifi get Wi-Fi command parameters information Parameter Sub Parameter bootmode 1- Access point(AP) mode 2- Station(STA) mode ssid_name SSID name authtype(Security type) 1 - OPEN Mode 2 - WPAPSK mode 3 - WEP mode 5 - 802 1x authentication MSCHAPV2 mode pwd(password) Password/passphrase username/index Username if authtype is 802 1x authentication MSCHAPV2 or Key Index if the authtype is WEP Application command parameters information Command Details Example appdemo help Application Service help command appdemo help appdemo start demo_id Select and start an application demo appdemo start 1 appdemo get Get the ID of currently running application demo appdemo get appdemo stop Stop the currently running application demo appdemo stop Application command parameters information Parameter Sub Parameter demo_ID 1 - WiFi station mode/Access point mode demo 8 - SSL Demo 9 - Ping Demo 10 - Iperf demo 11 - SNTP demo 18 - MQTT Demo ",
							" List of Applications Application Description WiFi station mode/Access point mode demo Demonstartes the Station Mode or Access Point(AP) mode of WINC3400 SSL Demo Demonstrates TCP SSL Client application Ping Demo Demonstrates the Ping test Iperf Demo Demonstrates the iperf application SNTP Demo Demonstrates how to retrieve time information from the time server MQTT Demo Demonstrates MQTT Application WiFi Provisioning Demo Demonstartes the WiFi provisioning application ",
							" Steps to isolate/copy individual application(s) from the demo If the user wants to isolate an application follow the below mentioned steps For example the user wants to isolate the SNTP demo in Bypass mode The SNTP demo uses the WiFi functionalities to get connected with the network So copy the files \" app_wifi c \" and \" app_wifi h \" from the path \" wireless_apps_winc3400/apps/wifi_bypass_demos/firmware/src \" or \" wireless_apps_winc3400/apps/wifi_socket_demos/firmware/src \" to \"src\" folder of the new demo project Then add these files to the project Now user should copy and add the SNTP application files \" app_sntp c \" and \" app_sntp h \" from the path \" wireless_apps_winc3400/apps/wifi_bypass_demos/firmware/src \" or \" wireless_apps_winc3400/apps/wifi_socket_demos/firmware/src \" to the \" src folder of the new demo project The \" app c \" and \" app h \" files need to be copied by the user These files integrate the SNTP application and WiFi functionalities Copy and add these two files from the same \"src\" path to the \"src\" folder of the new demo project In \"app c\" within \" APP_Initialize() \" function initialize the sntp application by calling \" APP_SntpInitialize(APPWiFiCallback) \" In \"app c\" file make sure that \" APP_WiFiTasks(wdrvHandle) \" is getting called from the \" APP_STATE_WDRV_OPEN \" state of \" APP_Tasks() \" state machine In the same state machine \" APP_Tasks() \" within the state \" APP_STATE_WDRV_APP_LOOP \" call the sntp application state machine \" APP_SntpTasks(handle) \" Now follow the steps mentioned in the SNTP demo document to run the SNTP demo using \"wifi\" \"sntp\" and \"appdemo\" commands Similarly for any application demo take the required application files along with WiFi files and \"app\" files to create the demo Note: User has to make sure the project path does not exceed windows path limit User should reset the device before switching the application and unpair the device from the android phone in case of switching BLE application demos Back to top ",
							" WiFi Provisioning The WiFi Provisioning application is used for receiving Wi-Fi provisioning data via the microchip android application \"WiFi-Provisioning\" and then triggering a Wi-Fi connection Download the android application \"WiFi Provisioning\" of Microchip Technologies from App store Start the DUT as Access Point Use \"wifi set\" command to configure Access Point In the configuration set the bootmode as Access point mode keep the authentication type as \"OPEN\" and give an SSID name for the Access point wifi_prov_config_cmd Enter the command \"appdemo start 1\" to run the application wifi_prov_app_start Connect the mobile phone to this Access point The IP address of connected device will be displayed on the console wifi_prov_app_connected Open the WiFi Provisioning application in mobile phone Set the Server IP Address as \"192 168 1 1\" and Server Port Number as \"6666\" Then press connect wif_prov_app_1 The list of available networks will be displayed in the next window wif_prov_app_2 Select the network and enter the password Then press \"SEND\" images/wifi_prov_app_3 The DUT will connect to the selected network and the IP address will be displayed on the terminal wifi_prov_app ",
							" WiFi Station Mode / Access Point Mode Demo This example demonstrates the use of the WINC3400 to behave as a Station or Access Point(AP) ",
							" Station Mode Configure the WiFi parameters using the \"wifi set \" command wifi_config Select and run the application using the command \"appdemo start 1\" ap_scan_start The application starts and perform scanning and connects to the WiFi ap_scan_console ",
							" Access Point Mode If the user wants to configure the device as Access Point configure the wifi using \"wifi set\" command In the configuration set the bootmode as Access point mode keep the authentication type as \"OPEN\" and give an SSID name for the Access point ap_mode_config_cmd Enter the command \"appdemo start 1\" to run the application ap_mode_config Connect a device to this Access point The IP address of connected device will be displayed on the console ap_mode_connected ",
							" SSL Demo This application demonstrates how a user can run a secured TCP Client on WINC3400 device In this application we open a secured html page 'https://www google com' Here the TCP SSL Client running on the WINC3400 device shall connect to server google com over a secured html port 443 and make a reuqtest for getting the html page Configure the wifi parameters using \"wifi set\" command wifi_config Enter the command \"ssl https://www google com/\" ssl_url Enter the command \"appdemo start 1 8\" The device will connect to the network and IP address will be displayed on the terminal window After connecting to the AP the TCP SSL Client on the WINC3400 device shall connect to the Server - google com over the secured html port 443 ssl_start Note: The user needs to ensure that the server certificate is a part of the WINC FW Image in case a secured connection is needed with the server After connecting to google Server the TCP SSL Client on the WINC3400 device shall send a GET HTML request and the google server shall send in the html page ssl_response ",
							" SNTP Demo This example demonstrates the use of the WINC3400 to retrieve time information from the time server Follow the below mentioned steps to run the demo Configure the wifi parameters using \"wifi set\" command wifi_config Enter the command \"sntp get\" sntp_get_cmd Enter the command \"appdemo start 1 11\" to run the SNTP demo First the device will connect to the network After the IP address has displayed on the terminal window application will execute the SNTP command and the response will be displayed on the terminal wimdow sntp_response ",
							" Ping Demo This application demonstrates how a user can run a ping test on WINC3400 device in Bypass Mode Configure the wifi parameters using \"wifi set\" command wifi_config Enter the command \"appdemo start 1\" Then the device will connected to the AP and the IP address will be displayed on the terminal ping_bypass_ip Enter the command \"ping ip_address \" It will start pinging the corresponding IP address ping_bypass_response ",
							" MQTT Demo This application demonstrates how a user run a MQTT Client using third party Paho software on WINC3400 device The user would need to use \"MQTT fx\" third party Mqtt Client application to receive message posted by MQTT Client running on WINC3400 device once it connects to the MQTT server Download the MQTT fx Third Party Mqtt Client Application and open it on Laptop Connect the MQTT fx Application to the MQTT Server - mqtt eclipseprojects io with port 1883 mqtt_bypass_fx1 Make the MQTT fx Application susbcribe to Topic \"MQTT_NET_Client topic\" mqtt_bypass_fx2 Configure the wifi parameters using \"wifi set\" command mqtt_bypass_wifi_set Enter the command \"mqtt start\" mqtt_bypass_start Enter the command \"appdemo start 1 18\" The device will connect to the network and IP address will be displayed on the terminal window mqtt_bypass_ap_connected The MQTT Client on the WINC3400 device shall connect to the MQTT Server - mqtt eclipseprojects io mqtt_bypass_client_connected After connecting to MQTT Server the MQTT Client on the WINC3400 device shall subscribe to Topic \"MQTT_NET_Client topic\" mqtt_bypass_subscribed The MQTT Client on the WINC3400 device shall publish the message \"MQTT NET Demo Test Message\" to Topic \"MQTT_NET_Client topic\" mqtt_bypass_published MQTT fx Application receives the message \"MQTT NET Demo Test Message\" on the Topic \"MQTT_NET_Client topic\" sent by the MQTT Client running on the WINC3400 mqtt_bypass_fx3 The message \"MQTT NET Demo Test Message\" will be published from MQTT fx Application Since it is subcribing to the same topic \"MQTT_NET_Client topic\" The MQTT demo will exit after publishing the message mqtt_bypass_completed NOTE: Sometimes the MQTT demo will give connection error if the default broker mqtt eclipseprojects io is down If so try the demo with this broker : broker hivemq com ",
							" Iperf Demo This application demonstrates how a user can run iperf application on WINC3400 device in Bypass Mode Configure the wifi parameters using \"wifi set\" command wifi_config Enter the command \"appdemo start 1\" to set the DUT(Device Under Test) in station mode It will connect to the wifi network and the IP address will be displayed on the terminal The user should enter the iperf commands in the terminal window (for DUT) and in the iperf application which is available in the PC Protocol PC DUT Command on PC Command on DUT UDP Client Server iperf -u -c Server_IP_Address -t time_peroid -i time_interval -u -b bandwidth e g : iperf -u -c 192 168 43 27 -b 20M -i 1 -t 10 iperf -s -u -i time_interval e g : iperf -s -u -i 1 UDP Server Client iperf -s -u -i time_interval e g : iperf -s -u -i 1 iperf -u -c Server_IP_Address -t time_peroid -i time_interval -u -b bandwidth e g : iperf -u -c 192 168 43 87 -b 20M -i 1 -t 10 TCP Client Server iperf -c Server_IP_Address -t time_peroid -i time_interval e g: iperf -c 192 168 43 27 -i 1 -t 10 iperf -s -i time_interval e g: iperf -s -i 1 TCP Server Client iperf -s -i time_interval e g: iperf -s -i 1 iperf -c Server_IP_Address -t time_peroid -x bandwidth e g: iperf -c 192 168 43 87 -x 10M -t 10 ",
							" Create your first WINC3400 Bypass mode example using Harmony TCP/IP stack ",
							" Overview This tutorial is a getting-started guide to demonstrate how to create a WINC3400 Bypass (Ethernet) mode example using MPLAB® Harmony v3 TCP/IP stack This tutorial implements a simple STA Client application on a microcontroller development board This will guide you through the steps required to create a new TCP/IP application using MPLAB® Harmony 3 modules ",
							" Software Details This tutorial is tested with following tool versions MPLAB® X IDE v5 40 MPLAB® XC32/32++ C Compiler v2 40 MPLAB® Harmony Configurator Plugin (MHC) v3 6 0 MPLAB® Harmony v3 Software Framework Note : Harmony 3 comes in modular format where user can choose which modules to work with In order to create WINC1500 bypass mode example following modules are essential Harmony Content Manager tool can be used to download/clone the repositories from Github bsp v3 9 0 core v3 9 2 csp v3 9 1 dev_packs v3 9 0 mhc v3 8 0 net v3 7 2 wireless_wifi v3 5 1 wireless_apps_winc3400 v3 4 1 ",
							" Hardware Setup The getting-started guide demonstrates the creation of a TCP/IP demo on the SAM E54 Xplained Pro board with the ATWINC1500 XPRO board These steps can be applied for other supported development boards applying the device/board specific configuration changes The microcontroller should be supported by NET and Wireless modules within H3 At this point SAM E54 is the only device supported by both modules New device support is constantly added to modules Check the individual module release notes for more details about device support SAME54 Xplained PRO ATWINC3400 XPRO The SAME54 Xplained PRO contains a built-in programmer-debugger tool called Embedded Debugger (EDBG) which is used in this tutorial Embedded Debugger ( EDBG ) Following image shows the hardware setup samd21_57 ",
							" Creating a new Harmony project Follow the steps to create a basic Harmony project The assumption is that H3 modules are cloned at \"C: microchip harmony v3\" Open the MPLAB® X IDE  Create a New Project by selecting File New Project  In the New Project window select 32-Bit MPLAB® Harmony 3 Project and click Next  new_project_choose_project Note: The MPLAB® Harmony 3 Project will not be displayed if the MPLAB® Harmony 3 Configurator plug-in is not installed It has to be installed before continuing with the next steps In the Framework Path enter the path of the folder to which the MPLAB® Harmony 3 packages are downloaded new_project_manage_framework In the Project Setting dialog window fill in or select the information needed as follows: Location : First create a \"winc_bypass_getting_started\" folder in the location of your choice (for example create the application project inside the 'C: microchip harmony v3 wireless_apps_winc3400 apps' folder) Then enter the path in this field Folder : Project Folder name For example sam_e54_xpro_winc3400  Name : Project Name i e winc_bypass_getting_started_sam_e54_xpro_winc3400  Path : Selecting the above fields auto populates the Path  winc3400_project_location Click Next  In the Configuration Settings dialog window fill in or select the information needed as follows: Name : Configuration Name For example sam_e54_xpro_winc3400  Target Device : Use the below table to chose the target device part number based on the demo board that you are using For this example: SAM E54 Xplained Pro uses ATSAME54P20A  The Device Filter textbox helps narrow down list of available devices as shown winc3400_project_config Click Finish  First time when you create a Harmony 3 project \"Window Manager Selection Dialog\" appears The user can select \"Standalone\" or \"Native\" depending upon the preference \"Standalone\" opens the MHC in a separate window \"Native\" opens MHC as a window within MPLAB® X IDE mhc3_window_manager_selection If the above dialog window doesn't appear then MHC can be launched by selecting MPLAB® Harmony 3 Configurator under Tools - Embedded - MPLAB® Harmony 3 Configurator  project_start_mhc In the MPLAB® Harmony Launcher window leave the launch path as default option i e MPLAB® Harmony Project Path but make sure it is correctly pointed to desired H3 cloned directory and click Launch  winc3400_mhc_launch_1 In the Configuration Database Setup window leave the DFP and CMSIS paths as default and click Launch winc3400_mhc_launch_2 MHC window will open now The default standalone Harmony configurator will be as shown below Different parts of configurator are: Available Components Active Components Project Graph Configuration Options Console Window winc3400_project_graph Depending upon the application needs the necessary components can be added from the Available Components  Go to Available Components - Board Support Packages (BSPs) and double click on the Board support package for the target board Below example shows the BSP for SAME54 Xplained Ultra board winc3400_bsp After adding BSP the Project Graph will look as below: winc3400_bsp_active Basic components needed for creating a project will be available in project graph by default The next step would be to configure the components based on the application needs ",
							" Add TCP/IP Components The TCP/IP components can be added from the Available Components Go to Available Components - Libraries - TCPIP The TCP/IP components are categorized into 5 different groups and a configurator is available for each group These configurators are: TCP/IP Application Layer Configurator TCP/IP Transport Layer Configurator TCP/IP Network Layer Configurator TCP/IP Driver Layer Configurator TCP/IP Basic Configurator mhc_steps_tcpip_avlbl_comp Note: It is recommended to add the TCP/IP components using these configurators When the components are added using configurators the dependent modules will be auto-activated ",
							" Application Layer Configurator Under Available Components Select the TCP/IP Application Layer Configurator and double click This step will add the TCP/IP Application Layer Configurator inside the APPLICATION LAYER group winc3400_tcp_ip_application This step also creates a hierarchy of groups as Root- TCP/IP STACK- APPLICATION LAYER Verify the hierarchy by going View: dropdown and check out different layers mhc_steps_tcpip_view_dropdown If you changed the view come back to APPLICATION LAYER view by using View: dropdown Select the TCP/IP Application Layer Configurator See the configurations options on right hand side mhc_steps_tcpip_app_configurator_show The different application protocols supported in the Harmony TCP/IP stack are listed Start selecting the required TCP/IP application layer protocols from the Configuration Options on right hand side For the Getting Started demo select the DHCP CLIENT This step will auto-activate all the dependent components Click Yes to add the Harmony Core component mhc_steps_tcpip_app_configurator_dhcpc_core Click No to for the FreeRTOS auto-activation as this demo does not need the FreeRTOS mhc_steps_tcpip_app_configurator_rtos Click Yes to add the TIME (sys_time) component mhc_steps_tcpip_app_configurator_time Click Yes to add the CONSOLE (sys_console) component mhc_steps_tcpip_app_configurator_console Click Yes to connect the CONSOLE component with TCP/IP CORE  mhc_steps_tcpip_app_configurator_console_autoconn Click Yes to add the DEBUG (sys_debug) component mhc_steps_tcpip_app_configurator_debug Click Yes to connect the CONSOLE component with TCP/IP CORE  mhc_steps_tcpip_app_configurator_debug_autoconn Click Yes to add the IPv4 component in TCP/IP Network Layer mhc_steps_tcpip_app_configurator_ipv4 Click Yes to add the ARP component in TCP/IP Network Layer mhc_steps_tcpip_app_configurator_arp Click Yes to add the UDP component in TCP/IP Transport Layer mhc_steps_tcpip_app_configurator_udp After the auto-activation of dependent components the DHCP CLIENT component is added to Project Graph mhc_steps_tcpip_app_configurator_dhcpc_done Add the DNS CLIENT to APPLICATION LAYER mhc_steps_tcpip_app_configurator_dnsc ",
							" Transport Layer Configurator Click on View: dropdown and go to the TRANSPORT LAYER  mhc_steps_tcpip_view_dropdown_app_to_trans Select the TCP/IP Transport Layer Configurator  mhc_steps_tcpip_trans_configurator UDP has been auto-activated while adding the Application Layer components Add the TCP protocol support for this demo mhc_steps_tcpip_trans_configurator_tcp Click Yes to add the TCP component in the TCP/IP Transport Layer mhc_steps_tcpip_trans_configurator_tcp_done ",
							" Network Layer Configurator Click on View: dropdown and go to the NETWORK LAYER  mhc_steps_tcpip_view_dropdown_trans_to_netw Select the TCP/IP Network Layer Configurator  mhc_steps_tcpip_network_configurator Add the ICMPv4 protocol support for this demo mhc_steps_tcpip_network_icmp Click Yes to add the ICMPv4 component in the TCP/IP Network Layer mhc_steps_tcpip_network_icmp_done Select ICMPv4 component in project graph to show its configuration settings in Configuration Options window Enable checkbox for Use ICMPv4 Client We need this to be able to ping other devices mhc_steps_tcpip_network_icmpc_enable ",
							" Driver Layer Configurator Click on View: dropdown and go to the DRIVER LAYER  mhc_steps_tcpip_view_dropdown_netw_to_drv Select the TCP/IP Driver Layer Configurator and enable WINC module checkbox Click Yes to add the WINC component in the TCP/IP Driver Layer mhc_steps_tcpip_drv_layer_winc Click Yes to connect the WINC component with the NETCONFIG  mhc_steps_tcpip_drv_winc_mac_depndnc WINC component is added in the TCP/IP Driver Layer mhc_steps_tcpip_drv_winc_added ",
							" Basic Configuration Click on View: dropdown and go to the Basic Configuration layer mhc_steps_tcpip_view_dropdown_drv_to_basic This layer contains TCP/IP stack's core configuration interface selection heap management MAC configuration etc Basic STACK Configuration and Network Configuration are already auto-activated during previous steps mhc_steps_tcpip_basic_configurator Select the TCP/IP Basic Configurator and enable TCPIP CMD mhc_steps_tcpip_basic_cmd Click Yes to connect the CMD component with the SYS Console  mhc_steps_tcpip_basic_cmd_depndncy Command module is added to the Basic Configuration layer mhc_steps_tcpip_basic_cmd_added ",
							" Satisfying Module Dependencies The project needs few more Harmony components In this section we will add and configure the required components Click on View: dropdown and go to the Root layer mhc_steps_tcpip_view_dropdown_basic_to_root The Root layer will be as shown below The red diamond-shaped buttons are unsatisfied mandatory dependencies the connections might look messy at first Feel free to move around some boxes so that project graph looks pretty mhc_steps_tcpip_root_1 Note: There are two ways to satisfy dependencies You can either right-click on red diamonds and select available satisfiers OR you can manually add components from Avilable Components window and manually connect diamonds Both ways are shown here ",
							" Satisfy Timer dependency: Right click on red diamond for TIME module From the list of Satisfiers select TC3  mhc_steps_project_tcpip_root_tc Timer peripheral instance TC3 will be added to Root layer and connected to the TIMER module mhc_steps_tcpip_root_tc_done ",
							" Satisfy Console dependency: From Available Components Peripherals SERCOM double-click on SERCOM2 to add it to current layer mhc_steps_avilable_plib_sercom SERCOM2 is added to the Root layer mhc_steps_tcpip_root_sercom_added To satisy Console UART dependency manually connect UART diamond from SERCOM2 with the UART diamond of CONSOLE module  mhc_steps_tcpip_root_console_uart_connection Select SERCOM2 in the Project Graph In the Configuration Options of SERCOM2  Set the TX Ring Buffer Size to 1024 Set the Receive Pinout to PAD  mhc_steps_tcpip_root_sercom_recv_pad ",
							" Satisfy TCP/IP Stack's (i e WINC's) SPI dependency: Right click on DRV_SPI red diamond of TCP/IP STACK module and select SPI as satisfier mhc_steps_tcpip_root_spi_drv Right click on red diamond of SPI driver module and select SERCOM4  mhc_steps_tcpip_root_drv_spi_plib Select SERCOM4 in the Project Graph In the Configuration Options of SERCOM4  Set the Data IN pad to PAD Select Enable SPI Master Hardware Select checkbox mhc_steps_tcpip_root_sercom_spi_settings ",
							" Satisfy Transport Layer LIB_CRYPTO Dependency: Click on View : dropdown and go to the Tranport layer  winc3400_transport_layer Right click on LIB_CRYPTO of TCP and select Cryptographic Library from Available Satisfiers winc3400_transport_layer_1 Right click on LIB_WOLFCRYPT of Cryptographic Library and select wolfCrypt Library from the list of Satisfiers winc3400_transport_layer_2 The project graph will become: winc3400_transport_layer_3 ",
							" Satisfy WINC's External Interrupt dependency: From Available Components Peripherals EIC double-click on EIC to add it to current Root layer mhc_steps_avilable_plib_eic Select EIC in the Project Graph In the Configuration Options of EIC  Select Enable EIC channel 7  Select Enable Interrupt Set the Edge selection to Falling edge detection  mhc_steps_tcpip_root_eic_conf All necessary dependencies are care of ",
							" Project Heap Configuration Select the System in the Project Graph In Configuration Options set the Heap Size (bytes) to 96960  mhc_steps_system_heap ",
							" WINC Driver Configuration Click on View: dropdown and go to the DRIVER LAYER  mhc_steps_tcpip_view_dropdown_root_to_drv Select WINC module in project graph In the Configuration Options window select the Interrupt Source for WINC as recently enabled EIC Channel 7  mhc_steps_tcpip_drv_winc_conf_eic ",
							" Pin Configuration The I/O pins on the device can have alternate functions other than the general purpose I/O function Here we will configure the functionality of the I/O pins required for this demo Open MHC - Tools - Pin Configuration  mhc_steps_tcpip_pin_config Configure the pins for EXT_INT7 SERCOM2 SERCOM4 and 2 GPIO as shown below Notice the GPIO pins must have Custom Name as shown in the figure winc3400_reset_pin mhc_steps_tcpip_pin_config_2 ",
							" Code Generation Once Harmony components are added using MHC to the Project Graph it's time to generate the source files based on the configurations Click Save button and Generate the code by clicking the Generate Code button (marked in red) mhc_steps_tcpip_generate_code Select the Merge Strategy as USER ALL Refer to the MHC documentation for different merge strategy options mhc_steps_tcpip_generate_code_merg_strat Click the Generate button to start the code generation mhc_steps_tcpip_generate_code_progress ",
							" Application Coding Now you have the MPLAB® Harmony components configured for a TCP/IP application The Getting-Started demo implements a simple Wi-Fi STA application This application is written using the APIs provided by the MPLAB® Harmony TCP/IP Stack There is already a STA demo implemented at D: MH3 wireless_apps_winc3400 apps wifi_winc_sta_bypass Let's make use of those source files for the winc_bypass_getting_started demo Copy the application files (i e app c  app h ) from D: MH3 wireless_apps_winc3400 apps wifi_winc_sta_bypass firmware src  Paste the application files at our current project's location D: MH3 wireless_apps_winc3400 apps winc_bypass_getting_started firmware src  winc3400_copy_files In MPLAB® X IDE project open the app c file that has been added to project and change the access point parameters as shown in the picture below winc3400_homeap ",
							" Build the Application Open the project Properties by Right Clicking on the project name (winc_bypass_getting_started) Ensure that the XC32 Compiler Tool-chain and SAME54 EDBG hardware tool is selected Press OK  winc3400_project_properties Build the application by clicking on the Build Main Project  project_build Verify the build results Make sure that the build is successful project_build_result ",
							" Program the Application Now the project is ready to be programmed on the hardware board Refer to the hardware user-guide to see the different programming options supported The SAME54 Xplained board can be programmed using the on-board debugger EDBG  Connect a micro-USB cable from computer to the DEBUG USB port on the SAM E54 Xplained Ultra board Program the application by clicking on the Make and Program Device Main Project  project_program Make sure that the programming is successful ",
							" Test the Application The testing of the application is done using different console commands There will be a virtual COM port enumerated when a micro-USB cable from the computer is connected to the DEBUG USB port on SAM E54 Xplained Ultra board Open a terminal application (eg: TeraTerm) and configure the baud rate for 115200  open_teraterm Press the Reset button on the SAM E54 Xplained Ultra board The following messages will be visible on the terminal window run_teraterm_outout_1 Type ping PC's IP address in the terminal window and press Enter to see responses run_teraterm_ping You can also ping this board from your PC using cmd prompt as shown below run_pc_cmd_pingy Currently WINC driver is configured not to display any logs You can change this setting in MHC by going to DRIVER LAYER and modifying the WINC configuration as shown below run_mhc_winc_change_log_conf After re-generating and re-programming with logging turned on you will see following output in tera term console run_teraterm_winc_log You have successfully created and tested your first WINC3400 Bypass mode Application ",
							" References TCP/IP Stack Library Help ",
							" WINC3400 Socket Mode Demo Applications This example project demonstrates the WINC3400 applications of WiFi and BLE in Socket mode ",
							" Description This project has both WiFi and BLE example applications The user can configure the WiFi parameters and select the required example application through command The user would need to use \"Microchip Bluetooth Data\" mobile application to run the BLE example applications ",
							" Downloading and building the application To download or clone this application from Github go to the top level of the repository Path of the application within the repository is wireless_apps_winc3400/apps/wifi_socket_demos/firmware  To build the application refer to the following table and open the project using its IDE Project Name Description sam_e54_xpro_winc3400 X MPLABX project for SAME54 and WINC3400 Xplained pro sam_d21_xpro_winc3400 X MPLABX project for SAMD21 and WINC3400 Xplained pro sam_e54_xpro_winc3400_freertos X MPLABX project for SAME54 and WINC3400 Xplained pro using FreeRTOS ",
							" Setting up SAMXXX Xplained Pro board Connect the Debug USB port on the SAMXXX Xplained Pro board to the computer using a micro USB cable ",
							" Running the Application Build and program the application project using its respective IDE Open the Terminal application (Ex :Tera term) on the computer Connect to the \"USB to UART\" COM port and configure the serial settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Use WiFi commands to configure WiFi parameters and use application commands to select the example application WiFi Commands Details Command Details Example wifi help Wi-Fi Service help command wifi help wifi set bootmode ssid_name auth_type pwd username/index Set Wi-Fi Configuration for Station(STA) mode or Access Point (AP) mode wifi set 2 DEMO_AP 2 12345678 wifi get Get Wi-Fi Configuration wifi get Wi-Fi command parameters information Parameter Sub Parameter bootmode 1- Access point(AP) mode 2- Station(STA) mode ssid_name SSID name authtype(Security type) 1 - OPEN Mode 2 - WPAPSK mode 3 - WEP mode 5 - 802 1x authentication MSCHAPV2 mode pwd(password) Password/passphrase username/index Username if authtype is 802 1x authentication MSCHAPV2 or Key Index if the authtype is WEP Application command parameters information Command Details Example appdemo help Application Service help command appdemo help appdemo start demo_id Select and start an application demo appdemo start 1 appdemo get Get the ID of currently running application demo appdemo get appdemo stop Stop the currently running application demo appdemo stop Application command parameters information Parameter Sub Parameter demo_ID 1 - WiFi station mode/Access point mode demo 6 - WiFi Provisioning via BLE 7 - OTA Demo 8 - SSL Demo 9 - Ping Demo 10 - Iperf demo 11 - SNTP demo 12 - Serial Chat 13 - Heart rate profile 14 - Battery Service 15 - Proximity Reporter 16 - Transparent Service 18 - MQTT Demo 19 - Certificate Download OTA Demo ",
							" List of Applications Application Description WiFi station mode/Access point mode demo Demonstartes the Station Mode or Access Point(AP) mode of WINC3400 WiFi Provisioning via BLE Demonstartes the WiFi provisioning using BLE OTA Demo Demonstartes the OTA firmware upgrade of WINC3400 SSL Demo Demonstrates TCP SSL Client application Ping Demo Demonstrates the Ping test Iperf Demo Demonstrates the iperf application SNTP Demo Demonstrates how to retrieve time information from the time server Custom serial Chat Demo Demonstrates the Custom Serial Chat application using BLE Heart Rate Profile Demo Demonstrates the Heart Rate Profile application using BLE Battery Service Demo Demonstrates the Battery Service application using BLE Proximity Reporter Demo Demonstrates the Proximity Reporter application using BLE Transparent Service Demo Demonstrates the Transparent Service application using BLE MQTT Demo Demonstrates MQTT Application WiFi Provisioning Demo Demonstartes the WiFi provisioning application Certificate Download OTA Demo Demonstartes the Certificate Download OTA Demo WiFi BLE Connectionless Gateway Demo Demonstrates the WiFi BLE connectionless Gateway ",
							" Steps to isolate/copy individual application(s) from the demo If the user wants to isolate an application follow the below mentioned steps For example the user wants to create an SNTP demo in Socket mode The SNTP demo uses the WiFi functionalities to get connected with the network So copy the files \" app_wifi c \" and \" app_wifi h \" from the path \" wireless_apps_winc3400/apps/wifi_bypass_demos/firmware/src \" or \" wireless_apps_winc3400/apps/wifi_socket_demos/firmware/src \" to \"src\" folder of the new demo project Then add these files to the project Now user should copy and add the SNTP application files \" app_sntp c \" and \" app_sntp h \" from the path \" wireless_apps_winc3400/apps/wifi_bypass_demos/firmware/src \" or \" wireless_apps_winc3400/apps/wifi_socket_demos/firmware/src \" to the \" src folder of the new demo project The \" app c \" and \" app h \" files need to be copied by the user These files integrate the SNTP application and WiFi functionalities Copy and add these two files from the same \"src\" path to the \"src\" folder of the new demo project In \"app c\" within \" APP_Initialize() \" function initialize the sntp application by calling \" APP_SntpInitialize(APPWiFiCallback) \" In \"app c\" file make sure that \" APP_WiFiTasks(wdrvHandle) \" is getting called from the \" APP_STATE_WDRV_OPEN \" state of \" APP_Tasks() \" state machine In the same state machine \" APP_Tasks() \" within the state \" APP_STATE_WDRV_APP_LOOP \" call the sntp application state machine \" APP_SntpTasks(handle) \" Now follow the steps mentioned in the SNTP demo document to run the SNTP demo using \"wifi\" \"sntp\" and \"appdemo\" commands Similarly for any application demo take the required application files along with WiFi files and \"app\" files to create the demo ",
							" Steps to isolate/copy individual BLE application(s) from the demo For BLE applications no need to copy the WiFi files But the user should copy the Ble_Service and Ble_Profile files from the path \" wireless_apps_winc3400 apps wifi_socket_demos firmware src ble \" For example the user wants to create a new project say \"Heart_rate_demo\" then Copy and add the ble_manager files from the path \" wireless_apps_winc3400 apps wifi_socket_demos firmware src ble ble_services ble_mgr \" to the \" Heart_rate_demo firmware src ble ble_services ble_mgr \" of the new project Copy and add the Heart rate profile files from the path \" wireless_apps_winc3400 apps wifi_socket_demos firmware src ble ble_profiles hr_sensor \" to the \" Heart_rate_demo firmware src ble ble_profiles hr_sensor \" of the new project Copy and add the Heart rate service files from the path \" wireless_apps_winc3400 apps wifi_socket_demos firmware src ble ble_services heart_rate \" to the \" Heart_rate_demo firmware src ble ble_services heart_rate \" of the new project Now copy and add the application files \"app_heart_rate c\" and \"app_heart_rate h\" from \" wireless_apps_winc3400 apps wifi_socket_demos firmware src \" to the \" Heart_rate_demo firmware src \" of the new project Copy and add the main application files \"app c\" and \"app h\" files from \" wireless_apps_winc3400 apps wifi_socket_demos firmware src \" to the \" Heart_rate_demo firmware src \" of the new project In \"app c\" within \" APP_Initialize() \" function initialize the Heart Rate application by calling \" APP_BleHeartrateInitialize(APPWiFiCallback) \" In \"app c\" file make sure that \" APP_BleHeartrateTasks(wdrvHandle) \" is getting called from the \" APP_STATE_WDRV_OPEN \" state of \" APP_Tasks() \" state machine Add the macro \"BLE_DEVICE_ROLE=BLE_PERIPHERAL\" in the project properties project_properties Now follow the steps mentioned in the \"Heart rate demo document\" to run the application using \"appdemo\" command Similarly for any ble application demo take the required application files ble_profile files ble_service files and \"app\" files to create the demo Note: User has to make sure the project path does not exceed windows path limit User should reset the device before switching the application and unpair the device from the android phone in case of switching BLE application demos Back to top ",
							" Wi-Fi BLE Connectionless Gateway Demo This application implements a gateway/central device that collects data from several BLE nodes and publishes it to the remote MQTT server Note: Currently this demo is disabled in the project sam_d21_xpro_winc3400 X due to memory limitation The user can enable this demo by enabling the macro APP_PUB_BLE_MQTT in app h file ",
							" Description In this demo the gateway device does not establish a connection with the BLE nodes The demo uses ATSAM D21 XPro along with ATWINC3400 XPro board as the gateway device and BLE nodes can be any BLE device For this demo ATSAM B11 XPro acts as a BLE node which sends out BLE advertisement packets Gateway receives data from the BLE nodes in the form of advertisement packets using BLE passive scanning mechanism and publishes the data to the remote MQTT server The messages published by the gateway application can be received (just for the data verification purpose) by wifi_socket_demos application as a MQTT client by subscribing to the topic used by the gateway to publish the messages As an alternate MQTT client user can download a Google Chrome Extension - MQTTLens  ",
							" Wi-Fi BLE Connectionless Gateway Demo The functional block diagram shows different modules in the Gateway Demo: gw_funct_block_diagram Download the MQTTLens (A Google Chrome Extension) as a MQTT client and open it on laptop Configure the MQTTLens Application for MQTT Server setting - broker hivemq com with port 1883 as shown below: gw_mqtt_lens_1 Subscribe to the Topic \"devices/WINC3400-GateWay/events\" gw_mqtt_lens_2 The gateway application mandates that all the gateway compatible BLE nodes are required to have the advertisement data in a specific format which the gateway application can parse The advertisement data should follow the format given below for the gateway application: gw_ble_node_advt_frame_format The table below provides advertisement packet data with respect to each byte position in the advertisement packet: Bytes Data Type and Description Data Value 0 AD Element:- Length (Flags Element Length) 0x02 1 AD Element:- Type (Flags) 0x01 2 AD Element:- Value (BR/EDR Supported LE General Discoverable mode) 0x06 3 AD Element:- Length (Manufacture Specific Length) 0x1B 4 AD Element:- Type (Manufacture Specific) 0xFF 5 6 GW Element:- MFG ID (Manufacture ID of Microchip) 0x00CD 7 GW Element:- APP ID (Application ID of WINC3400 Gateway) 0xAA 8 GW Element:- Name LEN (BLE Node Name Length) XX 9 - 20 GW Element:- Name (Maximum length of 12 bytes Node Name) XX XX XX 21 GW Element :- Value LEN (BLE Node Value Length) XX 22 - 30 GW Element :- Value (Maximum length of 9 bytes of Node Value) XX XX XX Note:  It is mandatory to have byte 0 to byte 7 as mentioned in the above table so that gateway can filter other BLE nodes from the gateway compatible BLE nodes Refer an existing project \"SIMPLE_BROADCASTER_SAMB11_XPLAINED_PRO\" from Microchip Studio for SAM B11 XPro board - to generate BLE advertisement data for the gateway application Make the following changes in the \"SIMPLE_BROADCASTER_SAMB11_XPLAINED_PRO\" project to set-up BLE nodes: simple_broadcaster_app_h Or use the SIMPLE_BROADCASTER_SAMB11_XPLAINED_PRO1 hex file which is available in \"apps wifi_socket_demos utilities hex SIMPLE_BROADCASTER_SAMB11_XPLAINED_PRO1 hex\" with ATSAM B11 XPro board to set up gateway compatible BLE node as below: gateway_ble_advt_pkt1 gateway_ble_advt_pkt2 Configure the WiFi parameters using the \"wifi set\" command Device will connect to the access point and the assigned IP address will be displayed on the terminal window Now enter the command \"appdemo start 1 20\" to run the Gateway application The gateway device creates an MQTT connection with the pre-configured MQTT server: broker hivemq com gw_demo_start_command Once the MQTT connection is successful the WINC34000 starts collecting the BLE advertisement data These data packets are sent to MQTT server in a loop The gateway application maintains a counter to monitor the node status The counter keeps incrementing at a regular interval and if overflows and reaches 0 the node is marked as dead But if the node was alive and transmitting advertisement packets for every received advertisement data the counter is reset to 1 and node becomes alive The gateway publishes messages on \"devices/WINC3400-GateWay/events\" topic gw_demo_out_1 gw_demo_out_2 gw_demo_out_3 gw_demo_out_4 Use command \"appdemo get\" to get the DemoId of the current application and \"appdemo stop\" to stop the current (Gateway) application gw_demo_out_5 Enable MQTT ( Only if you are using this application individually you need to enable this macro ) Follow the steps below to enable the macro \"WINC_MQTT\" for the gateway application: Open project properties mqtt_properties_1 Select xc32-gcc mqtt_properties_2 Select \"preprocessing and messages\" from the \"Option Categories\" mqtt_properties_3 Select the \"add\" button of \"Preprocessor Macros\" mqtt_properties_4 Add the macro \"WINC_MQTT\" and press OK mqtt_properties_6 ",
							" WiFi Provisioning via microchip android application The WiFi Provisioning application is used for receiving Wi-Fi provisioning data via the microchip android application \"WiFi-Provisioning\" and then triggering a Wi-Fi connection Download the android application \"WiFi Provisioning\" of Microchip Technologies from App store Start the DUT as Access Point Use \"wifi set\" command to configure Access Point In the configuration set the bootmode as Access point mode keep the authentication type as \"OPEN\" and give an SSID name for the Access point wifi_prov_app_set Enter the command \"appdemo start 1\" to run the application wifi_prov_app_start Connect the mobile phone to this Access point The IP address of connected device will be displayed on the console wifi_prov_app_connected Open the WiFi Provisioning application in mobile phone Set the Server IP Address as \"192 168 1 1\" and Server Port Number as \"80\" Then press connect wif_prov_app_1 The list of available networks will be displayed in the next window wif_prov_app_2 Select the network and enter the password Then press \"SEND\" wifi_prov_app_3 The DUT will connect to the selected network and the IP address will be displayed on the terminal wifi_prov_app ",
							" WiFi Provisioning via BLE The WiFi Provisioning application demonstartes the WiFi provisioning using BLE This is an BLE application example So the user need to download the Microchip Bluetooth Data application from App Store Enter \"wifiprov start\" command to start the provisioning wifi_prov_config Enter the command \"appdemo start 6\" to select and run the application wifi_prov_start Open the android application and select the \"Ble Provisioner\" widget Then press Scan button wifi_prov_widget Select “WiFi Prov” from the list for the ATWINC3400 prov_scan Select the AP and enter the security details and click Provision to start provisioning process prov_process The mobile application will ask for the password to pair Enter the pass-key “123456” on Bluetooth Pairing Request window and click Pair The device will connect to the AP and the IP address will be displayed on the terminal wifi_prov_console ",
							" Transparent Service Application Demo The Transparent Service is used as a data exchange method between the client and the server This application demonstrates the data exchange using Transparent service This is an BLE application example Download and install the Microchip SmartConnect mobile application from \" utilities apk BLEDK3_V1 0 apk\" Enter the command \"appdemo start 16\" to select and run the application transparent_service_start Open the Open the Microchip SmartConnect mobile application In application click Scan to start scanning for the BLE devices Transparent_service_scan_device Select uC-TRANS from the list of scanned devices transparent_service_device_list Enter the pass-key “123456” on Bluetooth Pairing Request window and click Pair Transparent_service_pairing When paired the application displays the “Transfer data to device” on the service page Click Transfer data to device The chat screen appears where the user can type the text that is to be sent to the remote device and also see the text coming from the remote device Transparent_service_transferring_data Chat text “Hello” to the remote device The data/text sent is displayed on the console/terminal for the device connected The user can write the text on the terminal using the command format \"trans send text_message \" and press ENTER key to send the text Transparent_service_terminal ",
							" WiFi Station Mode / Access Point Mode Demo This example demonstrates the use of the WINC3400 to behave as a Station or Access Point(AP) ",
							" Station Mode Configure the WiFi parameters using the \"wifi set \" command wifi_config Select and run the application using the command \"appdemo start 1\" ap_scan_start The application starts and perform scanning and connects to the WiFi ap_scan_console ",
							" Access Point Mode If the user wants to configure the device as Access Point configure the wifi using \"wifi set\" command In the configuration set the bootmode as Access point mode keep the authentication type as \"OPEN\" and give an SSID name for the Access point ap_mode_config_cmd Enter the command \"appdemo start 1\" to run the application ap_mode_config Connect a device to this Access point The IP address of connected device will be displayed on the console ap_mode_connected ",
							" SSL Demo This application demonstrates how a user can run a secured TCP Client on WINC3400 device In this application we open a secured html page 'https://www google com' Here the TCP SSL Client running on the WINC3400 device shall connect to server google com over a secured html port 443 and make a reuqtest for getting the html page Configure the wifi parameters using \"wifi set\" command ssl_wifi_config Enter the command \"ssl https://www google com/\" ssl_url Enter the command \"appdemo start 1 8\" The device will connect to the network and IP address will be displayed on the terminal window After connecting to the AP the TCP SSL Client on the WINC3400 device shall connect to the Server - google com over the secured html port 443 ssl_connected Note: The user needs to ensure that the server certificate is a part of the WINC FW Image in case a secured connection is needed with the server After connecting to google Server the TCP SSL Client on the WINC3400 device shall send a GET HTML request and the google server shall send in the html page ssl_response ",
							" SNTP Demo This example demonstrates the use of the WINC3400 to retrieve time information from the time server Follow the below mentioned steps to run the demo Configure the wifi parameters using \"wifi set\" command ping_demo_config Enter the command \"sntp get\" sntp_get_cmd Enter the command \"appdemo start 1 11\" to run the SNTP demo First the device will connect to the network After the IP address has displayed on the terminal window application will execute the SNTP command and the response will be displayed on the terminal wimdow sntp_response ",
							" Proximity Reporter Application Demo This application demonstrates the proximity monitoring between the WINC3400 and Android Mobile phone with Microchip Bluetooth Data application Note: Currently this demo is disabled in the project sam_d21_xpro_winc3400 X due to memory limitation The user can enable this demo by enabling the macro APP_BLE_PROXIMITY in app h file This is an BLE application example So the user need to download the Microchip Bluetooth Data application from App Store Enter the command \"appdemo start 15\" to select and run the application pxp_start Open the Microchip Bluetooth Data application Select Bluetooth Smart Widget In the Bluetooth Smart Widget press \"START SCAN\" From the list of available devices select the device name ATMEL-PXP PXP_device_list Enter the pass-key “123456” on Bluetooth Pairing Request window and click Pair pxp_pairing After pairing completed the supported services are displayed on the application proximity_service_list Select the desired service (Link Loss or Immediate Alert) for alert level characteristics configuration Choose a value from the following: HIGH ALERT/MILD ALERT/NO ALERT proximity_config_alert After configuration of the desired alert levels click Immediate Alert service and then move the mobile phone away from the Proximity Reporter Based on the distance of separation Path Loss is plotted on the zone radar (using RSSI values received from the Proximity Reporter) proximity_pathloss Based on the zone the Proximity Monitor sends the corresponding alert level The console log on the Proximity Reporter displays the corresponding alerts and on-board status LED behavior proximity_pathloss_terminal After configuration of the desired alert levels click on the Link Loss service and then move the mobile phone away from the reporter Keep moving until the “Link Loss”pop-up appears The console log on the Proximity Reporter displays the corresponding alerts and when Link Loss occurs it reports the disconnection and the on-board status LED behavior proximity_linkloss_pop_up proximity_link_loss_terminal After Link Loss the mobile application attempts to reconnect to the Proximity Reporter The connection is re-established by moving the mobile phone closer to the reporter Click the Tx Power Service icon in the services screen The Proximity Monitor reads the Tx Power value from the Proximity Reporter and displays the TX POWER LEVEL proximity_tx_power ",
							" Ping Demo This application demonstrates how a user can run a ping test on WINC3400 device in Socket Mode Configure the wifi parameters using \"wifi set\" command ping_demo_config Enter the command \"sping ip_address no_of_ping \" sping_cmd Then enter the command \"appdemo start 1 9\" to run the Ping demo First the device will connect to the network After the IP address has displayed on the terminal window the ping command will start ping_response ",
							" OTA Demo This example demonstrates how to upgrade the WINC3400 firmware via OTA It downloads the WINC3400 firmware from an OTA download server which is a web server Use any HTTP server or hfs exe from http://www rejetto com/hfs/ Run the hfs exe Set the port number to 8000 in the hfs tool hfs_set_port Add the OTA firmware from the “ utilities m2m_ota_3400 bin” to the root folder in the hfs exe tool hfs_add_file_path Note : Current OTA application ( utilities m2m_ota_3400 bin ) image is of latest firmware 1 4 2 release user can select required firmware version of the OTA image as per their choice To create the required OTA firmware follow the steps mentioned in the document Firmware Upgrade of WINC Devices  Configure the wifi parameters using \"wifi set\" command ping_demo_config Enter the command \"ota image_url \" ota_url Enter the application command \"appdemo start 1 7\" to run the OTA demo First the device will connect to the network After the IP address has displayed on the terminal window application will execute the OTA command and starts the OTA firmware upgrade ota_console ",
							" MQTT Demo This application demonstrates how a user run a MQTT Client using third party Paho software on WINC3400 device The user would need to use \"MQTT fx\" third party Mqtt Client application to receive message posted by MQTT Client running on WINC3400 device once it connects to the MQTT server Download the MQTT fx Third Party Mqtt Client Application and open it on Laptop Connect the MQTT fx Application to the MQTT Server - broker hivemq com with port 1883 mqtt_fx1 Make the MQTT fx Application susbcribe to Topic MCHP/Sample/a mqtt_fx2 Configure the wifi parameters using \"wifi set\" command ping_demo_config Enter the command \"mqtt start\" mqtt_start_cmd Enter the command \"appdemo start 1 18\" The device will connect to the network and IP address will be displayed on the terminal window Then the MQTT Client on the WINC3400 device shall connect to the MQTT Server - broker hivemq com mqtt_app_start After connecting to MQTT Server the MQTT Client on the WINC3400 device shall subscribe to Topic MCHP/Sample/b mqtt_subscribe_1 The MQTT Client on the WINC3400 device shall publish the message \"Hello\" to Topic MCHP/Sample/a mqtt_subscribe MQTT fx Application receives the message \"Hello\" on the Topic MCHP/Sample/a sent by the MQTT Client running on the WINC3400 mqtt_fx3 Publish message from MQTT fx Application on the Topic MCHP/Sample/b mqtt_fx4 The MQTT Client on the WINC3400 device receives the message on the Topic MCHP/Sample/b sent by the MQTT fx Application running on the laptop mqtt_publish_terminal Note: If the user wants to create a MQTT application project in Socket Mode and wants to use the Paho for MQTT Protocol One needs to follow the below mentioned steps 1 From the \"paho mqtt embedded-c\" repo copy the folder \"paho mqtt embedded-c MQTTPacket\" to \"app_demos firmware src third_party paho mqtt embedded-c MQTTPacket\" of the new project directory 2 From the \"paho mqtt embedded-c\" repo copy the folder \"paho mqtt embedded-c MQTTClient-C\" to \"app_demos firmware src third_party paho mqtt embedded-c MQTTClient-C\" of the new project directory 3 It is important to have the porting files \"MCHP_winc c\" and \"MCHP_winc h\" in the project These porting files are available only in \"wifi_socket_demo\" project Copy the folder from \"wifi_socket_demos firmware src third_party paho mqtt embedded-c MQTTClient-C Platforms\" to \"app_demos firmware src third_party paho mqtt embedded-c MQTTClient-C Platforms\" of the new project directory Please make sure that the folder structure of the new project is same as mentioned above Enable MQTT User should enable the macro \"WINC_MQTT\" to enable the MQTT application For this follow the steps: Open project properties mqtt_properties_1 Select xc32-gcc mqtt_properties_2 Select \"preprocessing and messages\" from the \"Option Categories\" mqtt_properties_3 Select the \"add\" button of \"Preprocessor Macros\" mqtt_properties_4 Add the macro \"WINC_MQTT\" and press OK mqtt_properties_6 ",
							" Iperf Demo This application demonstrates how a user can run iperf application on WINC3400 device in Socket Mode Configure the wifi parameters using \"wifi set\" command ping_demo_config Enter \" siperf tcp/udp \" on the terminal window to select and start the iperf application demo in the DUT Command on DUT Details siperf tcp Starts the TCP server at the DUT siperf udp Starts the UDP server at the DUT siperf_tcp Enter the application command \"appdemo start 1 10 \" to run the iperf demo First the device will connect to the network The IP address will be displayed on the terminal window Then the TCP/UDP server will get started iperf_tcp_start After the \"TCP/UDP\" server has started the user wants to run the iperf commands on the PC to start the iperf application as TCP/UDP Client iperf command details Command on PC Details Example iperf -c Server_IP_Address -t time_peroid -i time_interval -r Setup the TCP Client in the PC iperf -c 192 168 43 27 -i 1 -t 10 -r iperf -u -c Server_IP_Address -t time_peroid -i time_interval -u -b bandwidth -r Setup the UDP Client in the PC iperf -u -c 192 168 43 27 -b 20M -i 1 -t 10 -r After receiving the \"Server Report\" on the terminal enter the iperf commands on the PC to set the iperf application as TCP/UDP server Command on PC Details Example iperf -s -i time_interval Setup the TCP Server in the PC iperf -s -i 1 iperf -s -u -i time_interval Setup the UDP Server in the PC iperf -s -u -i 1 ",
							" Heart Rate Profile Application Demo This application demonstrates the exchange of heart rate parameters of heart rate profile between the sensor and monitor The heart rate profile is provided by Bluetooth SIG This is an BLE application example So the user need to download the Microchip Bluetooth Data application from App Store Enter the command \"appdemo start 13\" to select and run the application heart_rate_start Open the Microchip Bluetooth Data application Select Bluetooth Smart Widget In the Bluetooth Smart Widget press \"START SCAN\" From the list of available devices select the device name MCHP-HRT HRT_device_list Enter the pass-key “123456” on Bluetooth Pairing Request window and click Pair HRT_pairing After the device is connected the application displays the Heart Rate and the Device Information Service Select Heart Rate Service Heart_rate When notifications are enabled the HRM values Sensor Location and Energy Expended are displayed in the console and the corresponding mobile app Heart_rate_console ",
							" Custom Serial Chat Application Demo This application demonstrates the Custom Serial Chat application used for sending and receiving data between WINC3400 and the Microchip Bluetooth Data mobile application using BLE The user can send the information to the mobile phone using the console terminal that is configured with the board and vice versa Download the Microchip Bluetooth Data application from App Store Enter the command \"appdemo start 12\" to select and run the application serial_chat_star Open the Mobile Application and select the \"Bluetooth Smart\" widget MBD_dashboard In the Bluetooth Smart Widget press \"START SCAN\" From the list of available devices select the device name AT-CSC MBD_scan_lists Enter the pass-key “123456” on Bluetooth Pairing Request window and click Pair csc_pairing After pairing completed the Custom Serial Chat service appears on the service list page Click the Custom Serial Chat icon The chat icon appears and the user can type the text that is to be sent to the remote device Press \"Send\" button csc_chat_box The text received from the Mobile application will be displayed on the terminal The user can write the text on the terminal using the command format \"csc send text_message \" and press ENTER key to send the text custom_serial_chat_terminal ",
							" Certificate Download OTA Demo This example demonstrates how to download the TLS certificates into WINC3400 via OTA It downloads the certificates from an OTA download server which is a web server Note: This example will be only available with SAME54 Host Use any HTTP server or hfs exe from http://www rejetto com/hfs/ Run the hfs exe Add the certificates from the “ utilities cert_store” to the root folder in the hfs exe tool cert_down_ota_1 Configure the wifi parameters using \"wifi set\" command ping_demo_config Copy the URL from server cert_down_ota_7 Enter the command \"cert url \" cert_down_ota_3 Enter the application command \"appdemo start 1 19\" to run the Certificate download via OTA demo First the device will connect to the network cert_down_ota_4 After the IP address has displayed on the terminal window application will execute the CERT command and starts the certificate download cert_down_ota_5 ",
							" Battery Service Application Demo The]is application demonstartes the reporting of battery level of the device using the battery characteristics This example application simulates the device battery level from 0% to 100% with the step of 1% every second Note: Currently this demo is disabled in the project sam_d21_xpro_winc3400 X due to memory limitation The user can enable this demo by enabling the macro APP_BLE_BATTERY in app h file This is an BLE application example So the user need to download the Microchip Bluetooth Data application from App Store Enter the command \"appdemo start 14\" to select and run the application battery_start Open the Microchip Bluetooth Data application Select Bluetooth Smart Widget In the Bluetooth Smart Widget press \"START SCAN\" From the list of available devices select the device name MCHP-BAS BAS_device_list Enter the pass-key “123456” on Bluetooth Pairing Request window and click Pair bas_pairing When paired the application displays the Battery Service and the Generic Information service Select “Battery Service” to receive notifications for the battery level characteristic Bat_notification_options ",
							" Example project creation - WINC3400 Socket mode project with SAMD21 This document explains a step by step approach to create a WINC Socket mode project with SAMD21 host ",
							" Hardware Setup The document demonstrates the creation of a demo on the SAM D21 Xplained Pro board with the ATWINC1500 XPRO board The SAMD21 Xplained PRO contains a built-in programmer-debugger tool called Embedded Debugger (EDBG) which is used in this tutorial Following image shows the hardware setup samd21_57 ",
							" Steps to create the new example project Follow the below mwntioned steps to create the new WINC project in socket mode with SAMD21 from scratch ",
							" Project Creation Open MP Lab Go to File Menu and select New Project samd21_1 ",
							" Project Selection Under the Projects section select 32bit MPLAB Harmony3 Project and click on Next samd21_2 ",
							" Framework Selection Enter the local system path where the packages are downloaded click Next samd21_3 ",
							" Project Settings Under {local system H3 path} wireless_apps_winc1500 apps create a folder name for the project (Ex: sample_project) Enter the full path including the newly created project folder Enter the Folder name and Project name and click on Next (To know about “Folder” and “Name” please click “Show visual Help” button) samd21_4 ",
							" Configuration Settings Enter a Name for the config setting folder select the Target device name Click Finish  samd21_5 Click Launch once Configuration Database Setup windows pops up samd21_6 MHC window and has three panes Available components: It lists all the components from downloaded packages Project Graph It is where the user adds components from Available components Configuration options Each component in project graph can be configured using Configuration options samd21_7 ",
							" Adding components in MH3 User should select required components for creating WINC project ",
							" Core The first component to enable is Core because core is the base component for many drivers and system components Go to Harmony in the Available components Select core samd21_8 Drag and drop it in the Project Graph  This will ask permission to activate Free RTOS Since this project does not require free RTOS click No  samd21_9 Core component appears in the Project Graph as shown below samd21_10 ",
							" SAMD21 Xplained pro component This example uses SAMD21 xplained pro board for host development board Enable component SAM D21 Xplained Pro BSP Go to Board Support Packages select SAM D21 Xplained Pro BSP samd21_11 Drag and drop it in the Project Graph samd21_12 ",
							" Timer component WINC driver needs driver for its delay functionality and user can select the any timer for this To enable Timer Go to Harmony - System Services Select TIME samd21_13 Drag and drop it in the Project Graph samd21_14 Right click on TMR in the TIME component Go to Satisfiers and select TC3 (user can select any timer) samd21_15 This adds TC3 connected with TIME samd21_16 ",
							" EIC component WINC device uses interrupt pin PB07 To configure PB07 EIC component must be enabled Go to Peripherals Select EIC samd21_17 Drag and drop it in the Project Graph samd21_18 Pin PB04 belongs to external interrupt channel 4 so EIC channel 4 has to be enabled and configured Select EIC in the Project Graph Please do the following changes in the Configuration Options: Check Enable EIC channel4 box and expand EIC channel4 Configuration Check Enable Interrupt box Change Enable Interrupt4 Edge detection to Falling Edge detection samd21_19 ",
							" Virtual Console Virtual Console is used to send debug messages and to receive commands from user Virtual console uses UART interface for communication Host SAMD21 uses pins PA22 and PA23 for UART interface to perform receive and transmit operation respectively These two pins belong to SERCOM3 of the host SAMD21 device For more information please refer section 5 4 2 (Virtual COM Port) of SAM D21 Xplained Pro User's Guide To enable and configure Virtual COM port: Go to System Services Select CONSOLE samd21_20 Drag and drop it in the Project Graph samd21_21 UART interface of SERCOM3 is used by CONSOLE  Right click on the UART port of Instance 0 of the CONSOLE component Go to Satisfiers and select SERCOM3  samd21_22 SERCOM3 appears in Project Graph connected with CONSOLE  samd21_23 SERCOM3 uses PAD for data reception Change the Receive pinout property to SERCOM PAD in the Configuration Options Change the TX ring buffer size of SERCOM3 configuration to \"2048\" samd21_24 CONSOLE has a dependency on DEBUG and COMMAND component To add DEBUG component Right click on the SYS_CONSOLE interface of Instance 0 of the CONSOLE component Go to Consumers and select DEBUG samd21_25 DEBUG component connected with CONSOLE appears in the Project Graph samd21_26 ",
							" To add COMMAND component Right click on the SYS_CONSOLE interface of Instance 0 of the CONSOLE component Go to Consumers and select COMMAND samd21_27 COMMAND component connected with CONSOLE appears in the Project Graph samd21_28 ",
							" SPI component WINC communicates with host using SPI interface So to establish a SPI connection between WINC and host three components are required They are: SPI Driver SERCOM0 (Peripheral library) WINC Driver To enable SPI driver In the Available Components go to Harmony - Drivers Select SPI samd21_29 Drag and drop it in the Project Graph samd21_30 Connect SERCOM0 with SPI driver Right click on the SPI interface of Instance 0 of the SPI component Go to Satisfiers and select SERCOM0 samd21_31 SERCOM0 appears in Project Graph connected with SPI driver samd21_32 Enable DMA for SPI driver Select instance 0 on SPI driver Go to Configurations Options and enable Use DMA for Transmit and Receive samd21_33 SERCOM0 uses PAD for Data out PAD for Clock and PAD for Slave select Change the SPI Data out Pad to the required Pad selection in the configuration options of SERCOM0 Enable the property SPI Master Hardware Slave Select samd21_34 ",
							" WINC Component Enable WINC Driver in the project: In the Available Components go to Wireless Select Driver - WINC samd21_35 Drag and drop it in the Project Graph samd21_36 Connect DRV_SPI interface of SPI interface 0 and WINC component samd21_37 User has the option to select between WINC1500 and WINC3400 using the WINC Device configuration option Enable Interrupt for WINC: In the configuration options for WINC expand Interrupt Source Select EIC channel 4 samd21_38 WINC3400 BLE: User can enable BLE option in WINC3400 as shown below winc3400_1 ",
							" MHC PIN Configuration This section summarizes the pin configuration requirement for MHC pin configuration component In MHC user can do pin configuration with the help of below steps Go to Tools in menu bar Select Pin Configuration samd21_39 The following window appears samd21_40 The pin can be configured as shown below RESETN pin configuration: For WINC1500 Go to PB06 pin column Change the function to GPIO Name should be changed as “WDRV_WINC_RESETN” samd21_41 For WINC3400 Go to PB01 pin column Change the function to GPIO Name should be changed as “WDRV_WINC_RESETN” samd21_winc3400_2 Interrupt pin configuration: For both WINC1500 and WINC3400 Go to PB04 pin column Select the function as EIC_EXTINT4 samd21_42 Chip enable pin configuration: For both WINC1500 and WINC3400 Go to PB05 of pin column Change the function to GPIO Name should be changed as “WDRV_WINC_CHIP_EN” samd21_43 SERCOM0 Pin configuration Go to PA04 pin column Select the function as SERCOM0_PAD0 Go to PA05 pin column Select the function as SERCOM0_PAD1 Go to PA06 pin column Select the function as SERCOM0_PAD2 Go to PA07 pin column Select the function as SERCOM0_PAD3 samd21_44 SERCOM3 Pin configuration Go to PA22 pin column Select the function as SERCOM3_PAD0 Go to PA23 pin column Select the function as SERCOM3_PAD1 samd21_45 ",
							" Save and generate code To save the modifications Click Save Click Generate Code samd21_46 In the next window click Generate samd21_47 ",
							" Application Code With above component and pin configuration in MHC user has required peripheral libraries and drivers for application development User can follow the API guidelines to develop the application or follow the below step to create simple application for getting started Go to the path {local system path} wireless_apps_winc1500 apps{User project name} firmware src app c app h example c Replace the following files with the files available in the AP scan example project {local system path} wireless_apps_winc1500 apps ap_scan firmware src As example c file does not come with default project create a new file called example c under Source Files Right click on Source Files Select Add Existing Item samd21_48 Go to {local system path} wireless_apps_winc1500 apps{User project name} firmware src Select example c samd21_49 In the file example c user can change the Home AP credentials samd21_50 ",
							" Build and program the device To compile the project Right click on the project Select Clean and Build samd21_51 After successful build make sure SAME54 XPRO is connected with local system Right click again on the project Select Make and Program Device samd21_52 ",
							" Output Expected output samd21_53 Note: If the user wants to create the project using the FrreRTOS then follow the below mentioned steps To add FreeRTOS component Select FreeRTOS from Thrid party Libraries - RTOS - FreeRTOS samd21_54 Drag and drop it in the Project Graph samd21_55 In the configuration options of FreeRTOS change the Total heap size to 10000 samd21_56 ",
							" Example project creation - WINC3400 Socket mode project with SAME54 This document explains a step by step approach to create a WINC Socket mode project with SAME54 host ",
							" Hardware Setup The document demonstrates the creation of a demo on the SAM E54 Xplained Pro board with the ATWINC1500 XPRO board The SAME54 Xplained PRO contains a built-in programmer-debugger tool called Embedded Debugger (EDBG) which is used in this tutorial Following image shows the hardware setup same54_57 ",
							" Steps to create the new example project Follow the below mwntioned steps to create the new WINC project in socket mode with SAME54 from scratch ",
							" Project Creation Open MP Lab Go to File Menu and select New Project… same54_1 ",
							" Project Selection Under the Projects section select 32bit MPLAB Harmony3 Project and click on Next same54_2 ",
							" Framework Selection Enter the local system path where the packages are downloaded click Next same54_3 ",
							" Project Settings Under {local system H3 path} wireless_apps_winc1500 apps create a folder name for the project (Ex: sample_project) Enter the full path including the newly created project folder Enter the Folder name and Project name and click on Next (To know about “Folder” and “Name” please click “Show visual Help” button) same54_4 ",
							" Configuration Settings Enter a Name for the config setting folder select the Target device name Click Finish  same54_5 Click Launch once Configuration Database Setup windows pops up same54_6 MHC window and has three panes Available components: It lists all the components from downloaded packages Project Graph It is where the user adds components from Available components Configuration options Each component in project graph can be configured using Configuration options same54_7 ",
							" Adding components in MH3 User should select required components for creating WINC project ",
							" Core The first component to enable is Core because core is the base component for many drivers and system components Go to Harmony in the Available components Select core same54_8 Drag and drop it in the Project Graph  This will ask permission to activate Free RTOS Since this project does not require free RTOS click No  samd21_9 Core component appears in the Project Graph as shown below /same54_10 ",
							" SAME54 Xplained pro component This example uses SAME54 xplained pro board for host development board Enable component SAM E54 Xplained Pro BSP Go to Board Support Packages select SAM E54 Xplained Pro BSP same54_11 Drag and drop it in the Project Graph same54_12 ",
							" Timer component WINC driver needs driver for its delay functionality and user can select the any timer for this To enable Timer Go to Harmony - System Services Select TIME same54_13 Drag and drop it in the Project Graph same54_14 Right click on TMR in the TIME component Go to Satisfiers and select TC3 (user can select any timer) same54_15 This adds TC3 connected with TIME same54_16 ",
							" EIC component WINC device uses interrupt pin PB07 To configure PB07 EIC component must be enabled Go to Peripherals Select EIC same54_17 Drag and drop it in the Project Graph same54_18 Pin PB07 belongs to external interrupt channel 7 so EIC channel 7 has to be enabled and configured Select EIC in the Project Graph Please do the following changes in the Configuration Options: Check Enable EIC channel4 box and expand EIC channel7 Configuration Check Enable Interrupt box Change Enable Interrupt7 Edge detection to Falling Edge detection same54_19 ",
							" Virtual Console Virtual Console is used to send debug messages and to receive commands from user Virtual console uses UART interface for communication Host SAME54 uses pins PB24 and PB25 for UART interface to perform receive and transmit operation respectively These two pins belong to SERCOM2 of the host SAME54 device For more information please refer section 5 4 2 (Virtual COM Port) of SAM E54 Xplained Pro User's Guide To enable and configure Virtual COM port: Go to System Services Select CONSOLE same54_20 Drag and drop it in the Project Graph same54_21 UART interface of SERCOM2 is used by CONSOLE  Right click on the UART port of Instance 0 of the CONSOLE component Go to Satisfiers and select SERCOM2  same54_22 SERCOM2 appears in Project Graph connected with CONSOLE  same54_23 SERCOM2 uses PAD for data reception Change the Receive pinout property to SERCOM PAD in the Configuration Options same54_24 CONSOLE has a dependency on DEBUG and COMMAND component To add DEBUG component Right click on the SYS_CONSOLE interface of Instance 0 of the CONSOLE component Go to Consumers and select DEBUG same54_25 DEBUG component connected with CONSOLE appears in the Project Graph same54_26 ",
							" To add COMMAND component Right click on the SYS_CONSOLE interface of Instance 0 of the CONSOLE component Go to Consumers and select COMMAND same54_27 COMMAND component connected with CONSOLE appears in the Project Graph same54_28 ",
							" SPI component WINC communicates with host using SPI interface So to establish a SPI connection between WINC and host three components are required They are: SPI Driver SERCOM4 (Peripheral library) WINC Driver To enable SPI driver In the Available Components go to Harmony - Drivers Select SPI same54_29 Drag and drop it in the Project Graph same54_30 Connect SERCOM4 with SPI driver Right click on the SPI interface of Instance 0 of the SPI component Go to Satisfiers and select SERCOM4 same54_31 SERCOM4 appears in Project Graph connected with SPI driver same54_32 Enable DMA for SPI driver Select instance 0 on SPI driver Go to Configurations Options and enable Use DMA for Transmit and Receive same54_33 SERCOM4 uses PAD for data reception change the SPI Data In Pad selection property to SERCOM PAD in the Configuration Options Enable the property SPI Master Hardware Slave Select same54_34 ",
							" WINC Component Enable WINC Driver in the project: In the Available Components go to Wireless Select Driver - WINC same54_35 Drag and drop it in the Project Graph same54_36 Connect DRV_SPI interface of SPI interface 0 and WINC component same54_37 User has the option to select between WINC1500 and WINC3400 using the WINC Device configuration option Enable Interrupt for WINC: In the configuration options for WINC expand Interrupt Source Select EIC channel 7 same54_38 WINC3400 BLE: User can enable BLE option in WINC3400 as shown below winc3400_1 ",
							" MHC PIN Configuration This section summarizes the pin configuration requirement for MHC pin configuration component In MHC user can do pin configuration with the help of below steps Go to Tools in menu bar Select Pin Configuration same54_39 The following window appears samd21_40 The pin can be configured as shown below RESETN pin configuration: For WINC1500 Go to PA06 pin column Change the function to GPIO Name should be changed as “WDRV_WINC_RESETN” samd21_41 For WINC3400 Go to PB05 pin column Change the function to GPIO Name should be changed as “WDRV_WINC_RESETN” winc3400_2 Interrupt pin configuration: For both WINC1500 and WINC3400 Go to PB07 pin column Select the function as EIC_EXTINT7 same54_42 Chip enable pin configuration: For both WINC1500 and WINC3400 Go to PA27 of pin column Change the function to GPIO Name should be changed as “WDRV_WINC_CHIP_EN” same54_43 BLE pin configuration: This configuration only applicable for WINC3400 Go to PA04 pin column Change the function to SERCOM0_PAD0 Go to PA05 pin column Change the function to SERCOM0_PAD1 Go to PA06 pin column Change the function to SERCOM0_PAD2 Go to PA07 pin column Change the function to SERCOM0_PAD3 winc3400_3 SERCOM2 (COM Port) and SERCOM4 (SPI) pin configuration: For both WINC1500 and WINC3400 Go to PB24 pin column Change the function to SERCOM2_PAD1 Go to PB25 pin column Change the function to SERCOM2_PAD0 Go to PB26 pin column Change the function to SERCOM4_PAD1 Go to PB27 pin column Change the function to SERCOM4_PAD0 Go to PB28 pin column Change the function to SERCOM4_PAD2 Go to PB29 pin column Change the function to SERCOM4_PAD3 same54_44 ",
							" Save and generate code To save the modifications Click Save Click Generate Code same54_46 In the next window click Generate same54_47 ",
							" Application Code With above component and pin configuration in MHC user has required peripheral libraries and drivers for application development User can follow the API guidelines to develop the application or follow the below step to create simple application for getting started Go to the path {local system path} wireless_apps_winc1500 apps{User project name} firmware src app c app h example c Replace the following files with the files available in the AP scan example project {local system path} wireless_apps_winc1500 apps ap_scan firmware src As example c file does not come with default project create a new file called example c under Source Files Right click on Source Files Select Add Existing Item Go to {local system path} wireless_apps_winc1500 apps{User project name} firmware src Select example c In the file example c user can change the Home AP credentials samd21_50 ",
							" Build and program the device To compile the project Right click on the project Select Clean and Build same54_51 After successful build make sure SAME54 XPRO is connected with local system Right click again on the project Select Make and Program Device same54_52 ",
							" Output Expected output samd21_53 Note: If the user wants to create the project using the FrreRTOS then follow the below mentioned steps To add FreeRTOS component Select FreeRTOS from Thrid party Libraries - RTOS - FreeRTOS samd21_54 Drag and drop it in the Project Graph samd21_55 In the configuration options of FreeRTOS change the Total heap size to 10000 samd21_56 ",
							" Create WINC Project - Getting Started ",
							" Download wireless repository from Github After the installation open the MPLAB IDE and launch H3 content manager from the IDE content_manager Please provide the framework path with the local system path content_manager_2 This displays a new window as shown below content_manager_3 Using this window user can download either all the packages or only the wireless packages with its required dependencies To download the wireless packages and its dependencies: Scroll down and select wireless_wifi wireless_apps_winc1500 and wireless_apps_winc3400  Click Download Selected content_manager_4 It requests permission to download its dependencies Click OK content_manager_5 In the License Window Select Accept All License Click Close Go to the local system path and check if the following packages are downloaded correctly content_manager_6 ",
							" Pin mapping between host and WINC This section explains how to map pins between WINC1500/WINC3400 device and host to establish connection and exchange data Totally 7/11 pins are involved in pin mapping (except VCC and GND) and they are SPI (SS CLOCK MOSI and MISO) Reset Chip Enable Interrupt UART only applicable for WINC3400 BLE (Tx Rx CTS and RTS) spi SAME54 and SAMD21 is used as example host throughout this document for both WINC1500 and WINC3400 SAME54 / SAMD21 XPRO board is used as the host development board and WINC1500 XPRO / WINC3400 XPRO is used as development board Host and the WINC device are connected through extension headers In this document Extension 1 of SAME54 / SAMD21 host is used to connect with WINC device The one to one pin mapping can be performed between SAME54 / SAMD21 XPRO extension header and WINC XPRO extension header by referring the following sections of the document Table 4-1 section under 4 1 1 of WINC1500 Xplained Pro User's Guide Table 4-1 section under 4 1 1 of WINC3400 Xplained Pro User's Guide Table 5-1 section under 5 2 1 of SAM E54 Xplained Pro User's Guide Table 4-1 section under 4 1 1 of SAM D21 Xplained Pro User's Guide In the same way if the user is using a different host then he can perform one to one pin mapping by referring that host’s user guide ",
							" SPI interface Communication between SAME54 / SAMD21 and WINC happens through SPI interface Here WINC acts as a slave and SAME54 / SAMD21 acts as master The below table lists the SPI pins of WINC extension and its corresponding pins of SAME54 and SAMD21 spi_interface ",
							" Power up pins Reset and Chip Enable pins are used to perform power up sequence in WINC from host The below table lists the power up pins of WINC extension and its corresponding pins of SAME54 / SAMD21 ",
							" WINC1500 Power up pins power_pins ",
							" WINC3400 Power up pins 3400_power_pins ",
							" Interrupt pin Interrupt pin is used to send signal to host from WINC device int_pin ",
							" WINC Devices – Integrated Serial Flash Memory Download Procedure ATWINC1500/ATWINC3400 features an on-chip microcontroller and integrated SPI Flash memory for system firmware The serial flash memory also stores the root certificate required for TLS/SSL connection and the gain table values used by transceiver This application note explains in detail downloading procedure of firmware certificate and gain values into WINC serial flash through different supported serial interfaces like UART/I2C This document also covers some useful troubleshooting tips for downloading failures Features: Firmware download procedure Root certificate download procedure Gain table values download procedure Troubleshooting tips Common download procedure for WINC1500 and WINC3400 ",
							" Introduction The WINC1500 or WINC3400 firmware update project will be available in the path {local system path} wireless_wifi utilities wifi winc The latest firmware update project contains the new firmware images as well as the batch script and Shell script files used to download the firmware into Wi-Fi Network Controller (WINC) through SPI/UART ",
							" Firmware update project The ATWINC1500 and ATWINC3400 WiFi devices require firmware to be loaded into flash memory The ATWINC1500 and ATWINC3400 devices are preloaded with the firmware however it would be useful to update the latest firmware to take advantage of fixes and new features ",
							" Download wireless repository from Github Install MPLAB® X Integrated Development Environment (IDE) After the installation open the MPLAB IDE and launch H3 content manager from the IDE content_manager Please provide the framework path with the local system path content_manager_2 This displays a new window as shown below content_manager_3 Using this window user can download either all the packages or only the wireless packages with its required dependencies To download the wireless packages and its dependencies: Scroll down and select wireless_wifi wireless_apps_winc1500 and wireless_apps_winc3400  Click Download Selected content_manager_4 It requests permission to download its dependencies Click OK content_manager_5 In the License Window Select Accept All License Click Close Go to the local system path and check if the following packages are downloaded correctly content_manager_6 The firmware upgrade tool for WINC devices will be available in : {local system path} wireless_wifi utilities wifi winc ",
							" Hardware Setup SAM D21 Xplained Pro Evaluation Kit (ATSAMD21-XPRO) - SAMD21 is used as a HostMCU ATWINC1500 / WINC3400 Xplained PRO Evaluation Kit (ATWINC1500-XPRO / ATWINC3400-XPRO) - Wi-Fi SPI slave device connected to SAMD21 HostMCU device The ATWINC1500 / ATWINC3400 device is attached to EXT1 of the SAMD21 Xplained Pro kit Plug a micro-USB cable from Windows computer to the debug USB port of the SAM D21 Xplained Pro Evaluation kit hardware ",
							" Serial Bridge Application As the WINC device is connected to host MCU through SPI interface upgrading the WINC serial flash via the host MCU would be an easier solution Since WINC provides transparent access to host MCU the WINC serial flash can be read/written from host MCU The host MCU can program the serial (SPI) flash without the need for operational firmware in the WINC The host MCU running the serial bridge firmware is connected between computer and WINC SPI to download the firmware to WINC serial flash winc_programmer_UART (PC) —- samd21_xplained_pro_serial_bridge elf(Host) —- WINC SPI device ",
							" Serial Bridge Application for Harmony 3 Open MPLAB Go to File Menu and select Open Project In the next window select the Serial bridge project from {local system path} wireless_wifi apps serial_bridge firmware and click Open Project open_project Build the project The click Make and Program Device button make_n_program_device ",
							" Hardware Setup Power On Sequence To perform a serial flash download using the ATWINC1500 built-in UART it is mandatory that the ATWINC1500 chip is in the right bootloader state To do so the HostMCU must power up the ATWINC1500 chip and then perform the reset sequence as defined in the ATWINC1500 datasheet UART Pin Assignment Pin assignment of WINC1500 module UART are described in the following table On ATWINC1500 Xplained Pro TX and RX are available on through holes labeled “DEBUG_UART” for easy identification ATWINC1500 module pin name ATWINC1500 Xplained Pro pin name Function J14 UART_TX TXD J19 UART_RXD RXD Ensure that the HostMCU is powered up and ATWINC1500 built-in UART is connected to PC via a serial to USB converter ",
							" General Information on Firmware Update The firmware upgrade tool for the WINC devices contains Scripts Binary Tools ",
							" Scripts The \"winc\" folder in {local system path} wireless_wifi utilities wifi path contains the following two scripts winc_flash_tool cmd This script is for the firmware upgrade in Windows and it uses the \"image_tool\" and \"winc_programmer_uart/i2c\" to build and program the firmware binary image to the WINC devices winc_flash_tool cmd Usage Usage Command Example To erase the entire flash winc_flash_tool cmd /p COM3 /d WINC3400 /v 1 4 3 /e To create and program the Firmware Image winc_flash_tool cmd /p COM3 /d WINC3400 /v 1 4 3 /e /x /i prog /w To create and program the All-in-one(AIO) Image winc_flash_tool cmd /p COM3 /d WINC3400 /v 1 4 3 /e /x /i aio /w To create OTA Image winc_flash_tool cmd /p COM3 /d WINC3400 /v 1 4 3 /i ota Writing to \"Root certificate\" region winc_flash_tool cmd /p COM3 /d WINC3400 /v 1 4 3 /e /x /i root /w Writing to \"HTTP files\" region winc_flash_tool cmd /p COM3 /d WINC3400 /v 1 4 3 /e /x /i http /w To read the entire flash winc_flash_tool cmd /p COM3 /d WINC3400 /v 1 4 3 /r Arguments Details /p Serial port for UART mode /d WINC device type /s Aardvark serial number /v Firmware version number /e Erase entire device before programming /x Read XO offset before creating programming image /i Image type:prog - Programmer format aio - All in one image raw binary ota - OTA root - Root certificates in programmer format http - HTTP files in programmer format /w Write to device /f Filename of image file to create /r Read entire flash from device ",
							" Commands Logs Create and program the Firmware Image Expected output log for the command: winc_flash_tool cmd /p COM3 /d winc3400 /v 1 4 3 /i ota firmware_upgrade To create and program the All-in-one(AIO) Image Expected output log for the command: winc_flash_tool cmd /p COM3 /d winc3400 /v 1 4 3 /e /x /i aio /w firmware_aio To create OTA Image Expected output log for the command: winc_flash_tool cmd /p COM3 /d winc3400 /v 1 4 3 /e /x /i aio /w ota_image Writing to \"Root certificate\" region Expected output log for the command: winc_flash_tool cmd /p COM3 /d winc3400 /v 1 4 3 /e /x /i aio /w root_certificate Writing to \"HTTP files\" region Expected output log for the command: winc_flash_tool cmd /p COM3 /d winc3400 /v 1 4 3 /e /x /i http /w http_file To read the entire flash Expected output log for the command: winc_flash_tool cmd /p COM3 /d winc3400 /v 1 4 3 /e /x /i http /w read_flash winc_flash_tool sh This script is for the firmware upgrade in Linux and it uses the \"image_tool\" and \"winc_programmer_uart/i2c\" to build and program the firmware binary image to the WINC devices winc_flash_tool sh Usage Usage Command Example To erase the entire flash winc_flash_tool sh -p TTYS0 -d WINC3400 -v 1 4 3 -e To create and program the Firmware Image winc_flash_tool sh -p TTYS0 -d WINC3400 -v 1 4 3 -e -x -i prog -w To create and program the All-in-one(AIO) Image winc_flash_tool sh -p TTYS0 -d WINC3400 -v 1 4 3 -e -x i aio -w To create OTA Image winc_flash_tool sh -p TTYS0 -d WINC3400 -v 1 4 3 -i ota Writing to \"Root certificate\" region winc_flash_tool sh -p TTYS0 -d WINC3400 -v 1 4 3 -e -x -i root -w Writing to \"HTTP files\" region winc_flash_tool sh -p TTYS0 -d WINC3400 -v 1 4 3 -e -x -i http -w To read the entire flash winc_flash_tool sh -p TTYS0 -d WINC3400 -v 1 4 3 -r Arguments Details -p Serial port for UART mode -d WINC device type -s Aardvark serial number -v Firmware version number -e Erase entire device before programming -x Read XO offset before creating programming image -i Image type:prog - Programmer format aio - All in one image raw binary ota- OTA root- Root certificates in programmer format http - HTTP files in programmer format -w Write to device -f Filename of image file to create -r Read entire flash from device ",
							" ATWINC1500/ATWINC3400 Binary Tools The script files internally use the following tools to build and program the image image_tool - Builds firmware binary image winc_programmer_uart/i2c – Program the built firmware binary image to the WINC device using UART or I2C interface ",
							" Building Firmware Image image_tool located in {local system path} wireless_wifi utilities wifi winc tools is used to build binary images for ATWINC devices It collects all the binaries for each section and combine it in to one firmware called wincXXXX_X X X bin The image_tool arrange the section according to the flash memory orgianization of ATWINC1500/ATWINC3400 The image_tool collects the information from the flash_image XML file Refer flash_image config XML for how the flash memory is divided User needs to update the flash_image config for updating the root certificate or adding custom provisioning pages The configuration XML file(flash_image config) can be found under {local system path}wireless_wifi utilities wifi winc files wincXXXX X X X directory ",
							" image_tool Usage Usage Command Example To create firmware image image_tool exe -c 1 4 3 flash_image config -c gain_tables gain config -o winc3400_1 4 3 bin -of prog Writing to a specific region(eg: Root certificate) image_tool exe -c 1 4 3 flash_image config -c gain_tables gain config winc3400_1 4 3 bin -of prog -r “root certificates\" To create OTA firmware image image_tool exe -c 1 4 3 flash_image config -o winc3400_1 4 3 bin -of winc_ota -s ota Arguments Details -c Configuration files Microchip recommends to use the default configuration files which is flash_image config -o Output name of the binary image files ATWINC1500: winc1500_X X X bin ATWINC3400: winc3400_X X X bin -of The image_tool supports 4 output formats : raw - Raw binary image winc_ota - WINC OTA format prog - Format suitable for programming log - Textual log information -r Firmware version number -e Erase entire device before programming -x Read XO offset before creating programming image -i Image type:prog - Programmer format aio - All in one image raw binary ota - OTA root- Root certificates in programmer format http- HTTP files in programmer format -w Specifies a region to process More than one region can be specified with repeated use of this option If used only the regions specified will be processed For more information enter image_tool help command:image_tool -h ",
							" Commands Logs Creating Firmware Image Expected output log for the command: image_tool exe -c 1 4 3 flash_image config -c gain_tables gain config -o winc3400_1 4 3 bin -of prog imagetool_1 Writing to a Specific Region Expected output log for the command: image_tool exe -c 1 4 3 flash_image config -c gain_tables gain config winc3400_1 4 3 bin -of prog -r “root certificates\" imagetool_2 Creating OTA Firmware Image Expected output log for the command: image_tool exe -c 1 4 3 flash_image config -o winc3400_1 4 3 bin -of winc_ota -s ota imagetool_3 ",
							" Programming Firmware Image winc_programmer_uart/i2c tool located in src/firmware/firmware is used to program the binary images for ATWINC1500/ATWINC3400 devices using UART or I2C interface it does the following primary jobs: Erase the ATWINC1500/ATWINC3400 memory Read the firmware from ATWINC1500/ATWINC3400 Write the firmware to ATWINC1500/ATWINC3400 Verify the written firmware ",
							" winc_programmer_uart Tool Usage Usage Command Example Erase ATWINC1500/ATWINC3400 flash memory winc_programmer_uart exe -p COM16 -d winc3400 -e -pfw 1 4 3 firmware programmer_firmware bin Write the created binary image to ATWINC1500/ATWINC3400 flash memory winc_programmer_uart exe -p COM16 -d winc3400 -i winc3400_1 4 3 bin -if prog -w -pfw 1 4 3 firmware programmer_firmware bin Verify the written image in ATWINC1500/ATWINC3400 device winc_programmer_uart exe -p COM16 -d winc3400 -i winc3400_1 4 3 bin -if prog -r -pfw 1 4 3 firmware programmer_firmware bin Single command (including all the above operations) winc_programmer_UART exe -p COM16 -d winc3400 -e -i winc3400_1 4 3 bin -if prog -w -r -pfw 1 4 3 firmware programmer_firmware bin Arguments Details -p Port number of the connected HostMCU COM Port Command to find the Port number: test_edbg -d ATWINC device: winc1500 or winc3400 -e To erase the ATWINC1500/ATWINC3400 device flash memory before writing the firmware image -w To write the firmware image -r To read the firmware image -if Input format winc_ota - WINC OTA format raw - A raw binary image prog - Format suitable for programming -pfw programming firmware : WINC firmware used to program the device For more information enter winc_programmer_uart help command: winc_programmer_uart exe -h ",
							" Commands logs Erase WINC memory Expected output log for the command: winc_programmer_uart exe -p COM3 -d winc3400 -e -pfw 1 4 3 firmware programmer_firmware bin erase Write Firmware Image to WINC Note: Before executing this command user should create the firmware image of required version (winc3400_version prog) using image_tool Expected output log for the command: winc_programmer_uart exe -p COM3 -d winc3400 -i winc3400_1 4 3 prog -if prog -w -pfw 1 4 3 firmware programmer_firmware bin write_firmware Read Firmware Image from WINC memory Expected output log for the Command: winc_programmer_uart exe -p COM3 -d winc3400 -r -pfw 1 4 3 firmware programmer_firmware bin read_firmware Verify the Written Image Expected output log for the command: winc_programmer_uart exe -p COM3 -d winc3400 -i winc3400_1 4 3 prog -if prog -r -pfw 1 4 3 firmware programmer_firmware bin verify Consolidated Single Command : This command does all the above operations in a single command Note: Before executing this command user should create the firmware image of required version (winc3400_version prog) using image_tool Expected output log for the command: winc_programmer_UART exe -p COM3 -d winc3400 -e -i winc3400_1 4 3 prog -if prog -w -r -pfw 1 4 3 firmware programmer_firmware bin consolidated ",
							" Download Failure Troubleshooting Here are the troubleshooting tips for a specific error while downloading using batch script The script Failed To Find Any COM Port The winc_programmer_uart exe expects a COM port as an argument If the expected COM port is not found then it will provide the below error com_port_failed How to fix it: Make sure ATWINC1500/ATWINC3400 COM port is listed in the device manager Make sure ATWINC1500/ATWINC3400 COM port is not opened by any other application For verification try to open and close the COM port with a terminal application low quality USB cable or low quality serial to USB converter (built-in UART) can introduce garbage on the UART line thus failing the detection of the ATWINC1500/ATWINC3400 COM port Try a different cable When performing a “built-in UART download” it is expected that the ATWINC1500/ATWINC3400 bootloader is in a particular state that can only be achieved after doing a clean power up and reset sequence Hence before doing a download always ensure that a clean power up and reset sequence has been made Make sure that no other extension board (ex: IO1…) is connected to the Xplained Pro board while performing the download Make sure the project path is not exceeding Windows maximum 260 characters path length Failed To Initialize Programmer: Invalid Chip ID The Failed to initialize programmer with Invalid chip ID error typically happens when there is garbage or noise on the UART line preventing from reading the correct chip ID value How to fix it: Try connecting the PC and the ATWINC1500/ATWINC3400 with a different cable A clean power up and reset sequence of the ATWINC1500/ATWINC3400 is necessary to start over with the ATWINC1500/ATWINC3400 bootloader in the appropriate state Failed To Initialize Programmer: Waiting For Chip Permission After printing the correct chip ID of the ATWINC1500/ATWINC3400 the winc_programmer_UART tool programs a small binary (programmer firmware) to assist with ATWINC1500/ATWINC3400 flash programming At this stage the winc_programmer_UART will change the UART baud rate from 115200 to 500000 to speed up the actual transfer of the firmware image Once the baud rate change is made the chip permission is verified to ensure the UART connection is reliable Failing at this stage means that the current setup does not support such a high baud rate How to fix it: It is recommended to try connecting the PC and the ATWINC1500/ATWINC3400 with a different cable Also a clean power up and reset sequence of the ATWINC1500/ATWINC3400 is necessary to start over with the ATWINC1500/ATWINC3400 bootloader in the appropriate state ",
							" Supported Network Modes in WINC WINC devices can work in two modes Socket mode Bypass mode ",
							" Socket Mode By default WINC firmware includes TCP/ IP Stack and Wifi/ BT MAC Socket Mode exports driver level APIs for the User to write his Application and configure / communicate the TCP/ IP Stack and the Wi-Fi Stack using these APIs socket_mode ",
							" Bypass Mode In Bypass mode instead of using TCP/IP stack of WINC firmware user can use Harmony 3 TCP/IP stack on host side and directly access mac layer of WINC firmware via the WINC Driver APIs In this case TCP/IP stack of WINC firmware is bypassed bypass_mode ",
							" Microchip MPLAB® Harmony 3 Release Notes ",
							" Harmony 3 Wireless application examples for WINC3400 v3 4 2 ",
							" Development kit and demo application support Following table provides number of Wireless examples available for different development kits Development Kits MPLABx applications SAMD21 with WINC3400 Xpro 8 SAME54 with WINC3400 Xpro 10 ",
							" New Features New MQTT SSL SNTP and OTA demos added for Bypass mode New MQTT SSL SNTP OTA Certificate download and OTA demos added for Socket mode ",
							" Bug fixes \"wireless_wifi_apps_winc3400\" applications are upgraded with Countermeasures for ‘Fragattack’ vulnerabilities ",
							" Known Issues Due to an issue in the underlying net repo you need to turn off -Werror for the icmp c file in your projects User may face connectivity issue with the SSL demo of bypass mode with FreeRTOS Please use SSL demo of bypass mode without FreeRTOS \"wireless_wifi\" Serial bridge application needs to be regenerated before using it for firmware update Additional known issues can be found at WINC3400-known-issues ",
							" Development Tools MPLAB® X IDE v5 50 MPLAB® X IDE plug-ins: MPLAB® Harmony Configurator (MHC) v3 8 2 MPLAB® XC32 C/C++ Compiler v3 01 "];

